import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime
import os, base64


# Custom CSS
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: #ffffff;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .metric-container {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 0.5rem 0;
    }

    /* Centered header container and text */
    .header-container {
        text-align: center;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .header-text {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-top: 0.5rem;
    }

    .section-header {
        background-color: #f6f8fa;
        padding: 1.25rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        text-align: center;
    }
    .section-header h2 {
        margin: 0;
        font-size: 2rem;
        font-weight: bold;
        color: #1f77b4;
    }
    .section-header p {
        margin: 0;
        font-size: 1rem;
        color: #555;
    }
</style>
""", unsafe_allow_html=True)

# HEADER: logo + title on one line (flexbox)
try:
        # Encode logo to base64 for inline <img>
        script_dir = os.path.dirname(os.path.abspath(__file__))
        logo_base64 = ""
        # Check for logo.png in current directory first, then in ./assets/
        for p in [
            os.path.join(script_dir, "logo.png"),                      # 1Ô∏è‚É£ same-level logo
            os.path.join(script_dir, "assets", "logo.png")            # 2Ô∏è‚É£ assets folder
        ]:
            if os.path.exists(p):
                with open(p, "rb") as f:
                    logo_base64 = base64.b64encode(f.read()).decode()
                break
except Exception:
        logo_base64 = ""

    # Build logo HTML (fallback emoji if logo not found)
if logo_base64:
        logo_html = f"<img src='data:image/png;base64,{logo_base64}' style='height:150px; width:auto;' />"
else:
        logo_html = "<div style='font-size:2.5rem; margin-right:12px;'>üè•</div>"

header_html = f"""
    <div style='
        width:100%;
        display:flex;
        align-items:center;
        justify-content:center;
        gap:12px;
        padding:30px 0;
        background:#ffffff;
        border-radius:15px;
        margin-bottom:30px;
    '>
        {logo_html}
        <h1 style='
            color:#1f77b4;
            margin:0;
            font-size:3.2rem;
            font-weight:bold;
            font-family:"Segoe UI", Arial, sans-serif;
            text-shadow:2px 2px 4px rgba(0,0,0,0.1);
            letter-spacing:1px;
            text-align:center;
        '>Dashboard Qu·∫£n l√Ω s·ªë li·ªáu B·ªánh vi·ªán ƒê·∫°i h·ªçc Y D∆∞·ª£c TP. H·ªì Ch√≠ Minh</h1>
    </div>
    """
st.markdown(header_html, unsafe_allow_html=True)

# D·ªØ li·ªáu Ph√≤ng VTTB
vttb_data = {
    "sua_chua": {
        "phat_sinh": 2322,
        "hoan_thanh": 1973,
        "ty_le_hoan_thanh": round((1973/2322)*100, 1)
    },
    "trang_thai_tbyt": {
        "khac_phuc_tam_thoi": 54,
        "dang_sua_chua": 87,
        "thanh_ly": 2574,
        "tong_tam_ngung": 54 + 87 + 2574
    },
    "dau_thau": {
        "dang_thuc_hien": 49,
        "hoan_thanh": 51,
        "tong_gia_tri": 1158385811271
    },
    "van_ban": {
        "tong_den": 4965,
        "hoan_thanh": 4695,
        "chua_xu_ly": 144,
        "dang_xu_ly": 126,
        "ty_le_chua_xu_ly": 3,
        "ty_le_dang_xu_ly": 3
    },
    "kho": {
        "nhap_hcsk": 11150128821,
        "nhap_lktm": 13134877542,
        "xuat_hcsk": 11032099005,
        "xuat_lktm": 12868396672,
        "ton_hcsk": 833431469,
        "ton_lktm": 1017249841
    }
}

# D·ªØ li·ªáu Khoa KSKTYC
ksktyc_data = {
    "kham_khong_nn": {"value": 26794, "growth": 13.68},
    "kham_co_nn": {"value": 383, "growth": 751.11},
    "kham_lai_xe": {"value": 0, "growth": 0},
    "kham_dinh_ky": {"value": 24458, "growth": 14.23},
    "kham_hop_dong": {"value": 17803, "growth": 2.69},
    "kham_khong_hop_dong": {"value": 6655, "growth": 63.31},
    "kham_ca_nhan": {"value": 2719, "growth": 23.42},
    "kham_noi_vien": {"value": 23554, "growth": 20.23},
    "kham_ngoai_vien": {"value": 3623, "growth": -9.97}
}

# D·ªØ li·ªáu Ph√≤ng CNTT
cntt_data = {
    "thiet_bi": {
        "laptop": {"name": "Laptop", "quantity": 115},
        "may_vi_tinh": {"name": "M√°y vi t√≠nh", "quantity": 1480},
        "kiosk": {"name": "Kiosk ƒëi·ªán t·ª≠", "quantity": 12},
        "may_in_laser": {"name": "M√°y in Laser tr·∫Øng ƒëen", "quantity": 611},
        "may_in_mau": {"name": "M√°y in m√†u", "quantity": 63},
        "may_in_ma_vach": {"name": "M√°y in m√£ v·∫°ch", "quantity": 362},
        "dau_doc_ma_vach": {"name": "ƒê·∫ßu ƒë·ªçc m√£ v·∫°ch", "quantity": 482},
        "may_in_nhiet": {"name": "M√°y in nhi·ªát", "quantity": 101},
        "switch": {"name": "Switch", "quantity": 247},
        "access_point": {"name": "Access Point", "quantity": 416},
        "server_vat_ly": {"name": "Server v·∫≠t l√Ω", "quantity": 16},
        "server_ao_hoa": {"name": "Server ·∫£o h√≥a", "quantity": 220},
        "san": {"name": "SAN", "quantity": 5},
        "das": {"name": "DAS", "quantity": 1},
        "nas": {"name": "NAS", "quantity": 5},
        "router": {"name": "Router", "quantity": 2},
        "wifi_controller": {"name": "Wifi Controller", "quantity": 4},
        "firewall_cisco": {"name": "Firewall trong Cisco", "quantity": 2},
        "firewall_fortigate": {"name": "Firewall ngo√†i Fortigate", "quantity": 4},
        "san_switch": {"name": "SAN switch", "quantity": 4},
        "may_tinh_bang": {"name": "M√°y t√≠nh b·∫£ng", "quantity": 404},
        "may_scan": {"name": "M√°y scan", "quantity": 111},
        "may_in_the": {"name": "M√°y in th·∫ª VietinBank", "quantity": 10}
    },
    "hoat_dong": {
        "giai_quyet_de_nghi": {"name": "Gi·∫£i quy·∫øt ƒê·ªÅ ngh·ªã/Y√™u c·∫ßu t·ª´ c√°c ƒê∆°n v·ªã", "value": 97.16, "unit": "%", "comparison": 97.56},
        "ho_tro_phan_cung": {"name": "H·ªó tr·ª£ Ph·∫ßn c·ª©ng - M·∫°ng", "value": 2546, "unit": "l∆∞·ª£t", "comparison": 2734},
        "ho_tro_phan_mem": {"name": "H·ªó tr·ª£ ph·∫ßn m·ªÅm v√† th·ªëng k√™ s·ªë li·ªáu", "value": 2806, "unit": "l∆∞·ª£t", "comparison": 2752},
        "trien_khai_chuc_nang": {"name": "Tri·ªÉn khai ch·ª©c nƒÉng ph·∫ßn m·ªÅm m·ªõi", "value": 87, "unit": "ch·ª©c nƒÉng", "comparison": 71},
        "dang_ky_kham_online": {"name": "ƒêƒÉng k√Ω kh√°m tr·ª±c tuy·∫øn UMC Care", "value": 515745, "unit": "l∆∞·ª£t", "comparison": 166600},
        "su_dung_app": {"name": "S·ª≠ d·ª•ng ·ª©ng d·ª•ng di ƒë·ªông", "value": 1144937, "unit": "l∆∞·ª£t", "comparison": 585431},
        "ty_le_su_dung": {"name": "T·ª∑ l·ªá s·ª≠ d·ª•ng tr·ª±c tuy·∫øn", "value": 45.05, "unit": "%", "comparison": 28.46},
        "tham_quan": {"name": "Ti·∫øp ƒëo√†n tham quan, h·ªçc t·∫≠p v·ªÅ CNTT", "value": 10, "unit": "ƒëo√†n", "comparison": 12}
    }
}

# D·ªØ li·ªáu Trung T√¢m Truy·ªÅn Th√¥ng
tttt_data = {
    "bai_viet_truyen_thong": {
        "2024": 1201,
        "2025": 822,
        "growth": -32
    },
    "chuong_trinh_phong_su": {
        "2024": 390,
        "2025": 204,
        "growth": -48
    },
    "chuong_trinh_giao_duc": {
        "2024": 10,
        "2025": 4,
        "growth": -60
    },
    "website": {
        "luot_truy_cap_2024": 33855428,
        "luot_truy_cap_2025": 36074074,
        "luot_truy_cap_growth": 6.5,
        "bai_viet_2024": 140,
        "bai_viet_2025": 156,
        "bai_viet_growth": 11
    },
    "fanpage": {
        "luot_thich_2024": 186830,
        "luot_thich_2025": 229832,
        "luot_thich_growth": 23,
        "bai_viet_2024": 270,
        "bai_viet_2025": 239,
        "bai_viet_growth": -11,
        "hoi_dap_2024": 9015,
        "hoi_dap_2025": 9255,
        "hoi_dap_growth": 3
    },
    "zalo": {
        "luot_quan_tam_2024": 7035,
        "luot_quan_tam_2025": 10005,
        "luot_quan_tam_growth": 42,
        "bai_viet_2024": 221,
        "bai_viet_2025": 251,
        "bai_viet_growth": 14
    },
    "youtube": {
        "luot_dang_ky_2024": 163111,
        "luot_dang_ky_2025": 189403,
        "luot_dang_ky_growth": 16,
        "video_2024": 156,
        "video_2025": 174,
        "video_growth": 12
    },
    "tiktok": {
        "luot_dang_ky_2024": 0,
        "luot_dang_ky_2025": 3585,
        "luot_dang_ky_growth": 100,
        "video_2024": 0,
        "video_2025": 23,
        "video_growth": 100
    },
    "an_pham": {
        "loai_an_pham_2024": 15,
        "loai_an_pham_2025": 140,
        "loai_an_pham_growth": 833,
        "so_luong_2024": 0,
        "so_luong_2025": 300713,
        "so_luong_growth": 100
    }
}

# D·ªØ li·ªáu Ph√≤ng C√¥ng T√°c X√£ H·ªôi
ctxh_data = {
    "ho_tro_nguoi_benh": {
        "tu_van_nhap_vien": {"value": 24136, "comparison": 89.92, "unit": "Tr∆∞·ªùng h·ª£p"},
        "tu_van_xuat_vien": {"value": 23636, "comparison": 93.53, "unit": "Tr∆∞·ªùng h·ª£p"},
        "goi_dien_thoai": {"value": 4599, "comparison": 86, "unit": "Cu·ªôc g·ªçi"},
        "tin_nhan_tai_kham": {"value": 20743, "comparison": 103.84, "unit": "Tin nh·∫Øn"},
        "cai_dat_app": {"value": 23248, "comparison": 103, "unit": "L∆∞·ª£t"},
        "ho_tro_kho_khan": {"value": 86, "comparison": 661, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "kinh_phi_ho_tro": {"value": 8575712876, "comparison": 395, "unit": "ƒê·ªìng"},
        "ho_tro_tam_ly": {"value": 254, "comparison": 49, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "chuong_trinh_ho_tro": {"value": 5, "comparison": 83.33, "unit": "Ch∆∞∆°ng tr√¨nh"},
        "hai_long_noi_tru": {"value": 99.20, "comparison": 100.61, "unit": "%"}
    },
    "sinh_hoat_nha": {
        "lan_sinh_hoat_cc": {"value": 246, "comparison": 95, "unit": "L·∫ßn"},
        "nguoi_tham_du_cc": {"value": 6950, "comparison": 116, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "lan_sinh_hoat_gmhs": {"value": 250, "comparison": 96, "unit": "L·∫ßn"},
        "nguoi_tham_du_gmhs": {"value": 14953, "comparison": 94, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "tu_van_phau_thuat": {"value": 3118, "comparison": 78.84, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "videocall": {"value": 5719, "comparison": 94, "unit": "L∆∞·ª£t ng∆∞·ªùi"}
    },
    "ho_tro_thuoc": {
        "so_chuong_trinh": {"value": 12, "comparison": 100, "unit": "Ch∆∞∆°ng tr√¨nh"},
        "nguoi_benh_tham_gia": {"value": 313, "comparison": 148.34, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "tien_tai_tro": {"value": 57942065779, "comparison": 186.22, "unit": "ƒê·ªìng"}
    },
    "tiep_nhan_gop_y": {
        "thu_khen": {"value": 294, "comparison": 108, "unit": "Th∆∞"},
        "thu_gop_y": {"value": 9, "comparison": 450, "unit": "Th∆∞"},
        "duong_day_byt": {"value": 0, "comparison": 100, "unit": "Tr∆∞·ªùng h·ª£p"},
        "duong_day_gd": {"value": 82, "comparison": 97.62, "unit": "Tr∆∞·ªùng h·ª£p"}
    },
    "cham_soc_cong_dong": {
        "tong_kinh_phi": {"value": 2178690356, "comparison": 77, "unit": "ƒê·ªìng"},
        "so_chuong_trinh": {"value": 10, "comparison": 91, "unit": "Ch∆∞∆°ng tr√¨nh"},
        "luot_dan": {"value": 4062, "comparison": 103, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "me_vnah_tb": {"value": 12, "comparison": 66.67, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "nan_nhan_da_cam": {"value": 1000, "comparison": 142.86, "unit": "L∆∞·ª£t ng∆∞·ªùi"},
        "tang_bo": {"value": 0, "comparison": 0, "unit": "Con"},
        "tang_xe_dap": {"value": 36, "comparison": 120, "unit": "C√°i"},
        "so_tiet_kiem": {"value": 0, "comparison": 0, "unit": "C√°i"},
        "hoc_bong": {"value": 0, "comparison": 100, "unit": "Su·∫•t"},
        "cong_trinh": {"value": 1, "comparison": 0, "unit": "C√¥ng tr√¨nh"}
    },
    "van_dong_tai_tro": {
        "so_tien": {"value": 65.9, "comparison": 173.88, "unit": "ƒê·ªìng"}
    }
}

tcbc_data = {
    "to_chuc": {
        "phong_trung_tam": {"value": 16, "change": 0},
        "khoa": {"value": 54, "change": -1, "detail": {"chinh": 42, "lien_ket": 10, "phu_thuoc": 2}},
        "trung_tam": {"value": 6, "change": 0, "detail": {"chinh": 4, "lien_ket": 1, "phu_thuoc": 1}},
        "don_nguyen": {"value": 30, "change": +1, "detail": {"chinh": 28, "lien_ket": 2, "phu_thuoc": 0}},
        "don_vi": {"value": 6, "change": 0, "detail": {"chinh": 1, "lien_ket": 2, "phu_thuoc": 3}},
        "tram": {"value": 1, "change": +1},
        "hoi_dong": {"value": 27, "change": 0, "detail": {"chinh": 26, "phu_thuoc": 1}},
        "to": {"value": 14, "change": 0, "detail": {"chinh": 12, "lien_ket": 1, "phu_thuoc": 1}},
        "ban_tieu_ban": {"value": 21, "change": 0},
        "mang_luoi": {"value": 17, "change": 0},
        "sap_xep_don_vi": {
            "thanh_lap": {"value": 1, "change": +1},
            "doi_ten": {"value": 30, "change": +30},
            "giai_the": {"value": 7, "change": +7}
        }
    },
    "nhan_su": {
        "thuong_xuyen": {"value": 3598, "change": +135, "detail": {"chinh": 3155, "lien_ket": 364, "phu_thuoc": 79}},
        "vu_viec_toan_tg": {"value": 144, "change": -5, "detail": {"chinh": 114, "lien_ket": 24, "phu_thuoc": 6}},
        "vu_viec_ban_tg": {"value": 637, "change": +33, "detail": {"chinh": 475, "lien_ket": 128, "phu_thuoc": 34}},
        "bo_nhiem": {"value": 3, "change": +1},
        "bo_nhiem_lai": {"value": 9, "change": +6},
        "giao_phu_trach": {"value": 5, "change": +5, "detail": {"chinh": 3, "lien_ket": 2}},
        "thoi_chuc_vu": {"value": 4, "change": +2, "detail": {"chinh": 2, "lien_ket": 2}},
        "tuyen_dung": {"value": 105, "change": -46, "detail": {"chinh": 80, "lien_ket": 21, "phu_thuoc": 4}},
        "cham_dut_hdld": {"value": 36, "change": -6, "detail": {"chinh": 35, "phu_thuoc": 1}},
        
        # TH√äM D·ªÆ LI·ªÜU M·ªöI - C∆† C·∫§U NH√ÇN S·ª∞ CHI TI·∫æT
        "tong_nhan_su_3_co_so": {
            "t6_2024": 4216,
            "t6_2025": 4379,
            "tang_giam": 163,
            "tang_giam_percent": 3.87
        },
        "co_cau_trinh_do": {
            "sau_dai_hoc": {
                "t6_2024": 1158,
                "t6_2025": 1236,
                "tang_giam": 78,
                "tang_giam_percent": 6.7
            },
            "dai_hoc": {
                "t6_2024": 1331,
                "t6_2025": 1514,
                "tang_giam": 183,
                "tang_giam_percent": 13.7
            },
            "cao_dang_trung_hoc": {
                "t6_2024": 1129,
                "t6_2025": 998,
                "tang_giam": -131,
                "tang_giam_percent": -11.6
            },
            "pho_thong_trung_hoc": {
                "t6_2024": 598,
                "t6_2025": 631,
                "tang_giam": 33,
                "tang_giam_percent": 5.5
            }
        },
        "co_cau_chi_tiet": {
            "giao_su": {"so_luong": 12, "ty_le": 0.27},
            "pho_giao_su": {"so_luong": 86, "ty_le": 1.96},
            "tien_si": {"so_luong": 146, "ty_le": 3.33},
            "bac_sy_ck2": {"so_luong": 135, "ty_le": 3.08},
            "thac_si": {"so_luong": 642, "ty_le": 14.66},
            "bac_sy_ck1": {"so_luong": 215, "ty_le": 4.91},
            "dai_hoc_chi_tiet": {"so_luong": 1514, "ty_le": 34.57},
            "cao_dang": {"so_luong": 80, "ty_le": 1.83},
            "trung_hoc": {"so_luong": 918, "ty_le": 20.96},
            "nhan_vien_yte_khac": {"so_luong": 631, "ty_le": 14.41}
        }
    },
    "dao_tao": {
        "cu_dao_tao": {"value": 301, "change": +112, "detail": {"trong_nuoc": 255, "nuoc_ngoai": 46}},
        "dao_tao_noi_bo": {
            "so_lop": {"value": 7, "change": +3},
            "luot_tham_gia": {"value": 617, "change": +166}
        }
    },
    "khieu_nai_to_cao": {
        "don_thu_khieu_nai": {"value": 1, "change": 0},
        "don_thu_to_cao": {"value": 0, "change": 0},
        "vu_viec_khoi_kien": {"value": 0, "change": 0},
        "da_giai_quyet": {"value": 0, "change": 0},
        "chua_giai_quyet": {"value": 0, "change": 0}
    },
    "thi_dua_khen_thuong": {
        "khen_dinh_ky": {"value": 49, "change": 0, "detail": {"tap_the": 48, "ca_nhan": 1}},
        "khen_dot_xuat": {"value": 983, "change": 0, "detail": {"tap_the": 812, "ca_nhan": 170, "phu_thuoc": 1}},
        "sang_kien": {"value": 0, "change": 0},
        "danh_gia": {"value": 0, "change": 0}
    }
}

qttn_data = {
    "hieu_suat_hoat_dong": {
        "ty_le_hoan_thanh_de_nghi": {"value": 63, "target": 80},
        "ty_le_hoan_thanh_sua_chua": {"value": 100, "target": 95},
        "ty_le_hoan_thanh_ke_hoach": {"value": 70, "target": 85},
        "ty_le_hoan_thanh_mua_sam": {"value": 78, "target": 80}
    },
    "chat_thai": {
        "rac_thai_thong_thuong": {"value": 655, "unit": "t·∫•n"},
        "chat_thai_nguy_hai_lay_nhiem": {"value": 218.7, "unit": "t·∫•n"},
        "chat_thai_nguy_hai": {"value": 12.5, "unit": "t·∫•n"},
        "tai_che": {
            "giay": {"value": 86.4, "unit": "t·∫•n"},
            "nhua": {"value": 12.9, "unit": "t·∫•n"}
        }
    },
    "kho_khi_y_te": {
        "tong_hop": {
            "ton_dau_ky": 17342225,
            "nhap_trong_ky": 1519526118,
            "xuat_trong_ky": 1514080998,
            "ton_cuoi_ky": 22787345
        },
        "chi_tiet_ton_cuoi_ky": {
            "argon_1m3": {"value": 218000, "quantity": 2, "unit": "VND/b√¨nh"},
            "co2_25kg": {"value": 17070625, "quantity": 65, "unit": "VND/b√¨nh"},
            "co2_8kg": {"value": 1512720, "quantity": 18, "unit": "VND/b√¨nh"},
            "nitro_6m3": {"value": 1925000, "quantity": 25, "unit": "VND/b√¨nh"},
            "oxy_lon_6m3": {"value": 1863000, "quantity": 36, "unit": "VND/b√¨nh"},
            "oxy_nho_2m3": {"value": 198000, "quantity": 6, "unit": "VND/b√¨nh"}
        },
        "theo_thang": {
            "ton_dau_ky": [17342225, 16176124, 16005975, 23232700, 21811794, 22746944],
            "nhap": [260105615, 271425594, 222402147, 344070650, 204267338, 217254774],
            "xuat": [261271716, 271595743, 215175422, 345491556, 203332188, 217214373],
            "ton_cuoi_ky": [16176124, 16005975, 23232700, 21811794, 22746944, 22787345]
        }
    }
}

# TABS CH√çNH - M·ªñI PH√íNG BAN M·ªòT TAB
tab_vttb, tab_ksktyc, tab_cntt, tab_ctxh, tab_tttt, tab_tcbc, tab_qttn = st.tabs([
    "üîß V·∫≠t T∆∞ Thi·∫øt B·ªã", 
    "ü©∫ Kh√°m S·ª©c Kh·ªèe Theo Y√™u C·∫ßu",
    "üíª C√¥ng Ngh·ªá Th√¥ng Tin",
    "ü§ù C√¥ng T√°c X√£ H·ªôi",
    "üì± Truy·ªÅn Th√¥ng",
    "üë• T·ªï ch·ª©c C√°n b·ªô",
    "üè¢ Qu·∫£n tr·ªã T√≤a nh√†"
])

# ==================== TAB PH√íNG VTTB ====================
with tab_vttb:
    st.markdown("""
    <div class="section-header">
        <h2>üîß V·∫¨T T∆Ø THI·∫æT B·ªä</h2>
        <p>Qu·∫£n l√Ω s·ª≠a ch·ªØa, ƒë·∫•u th·∫ßu, kho v·∫≠t t∆∞ v√† x·ª≠ l√Ω vƒÉn b·∫£n</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sub-tabs cho VTTB
    subtab1, subtab2, subtab3, subtab4, subtab5 = st.tabs([
        "üìä T·ªïng Quan", "üîß S·ª≠a Ch·ªØa TBYT", "üì¶ Mua S·∫Øm", "üìÑ VƒÉn B·∫£n", "üè™ Qu·∫£n L√Ω Kho"
    ])
    
    # Mock data cho xu h∆∞·ªõng 6 th√°ng
    months = ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6']
    
    # VTTB - Tab T·ªïng quan
    with subtab1:
        st.header("üìä T·ªïng quan ho·∫°t ƒë·ªông")
        
        # KPI Cards h√†ng ƒë·∫ßu
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ª∑ l·ªá ho√†n th√†nh s·ª≠a ch·ªØa",
                f"{vttb_data['sua_chua']['ty_le_hoan_thanh']}%",
                f"{vttb_data['sua_chua']['ty_le_hoan_thanh'] - 80:.1f}% vs target 80%"
            )
        
        with col2:
            st.metric(
                "G√≥i th·∫ßu ho√†n th√†nh",
                f"{vttb_data['dau_thau']['hoan_thanh']} g√≥i",
                f"+{vttb_data['dau_thau']['hoan_thanh'] - 45} vs k·∫ø ho·∫°ch"
            )
        
        with col3:
            st.metric(
                "T·ª∑ l·ªá x·ª≠ l√Ω vƒÉn b·∫£n",
                f"{round((vttb_data['van_ban']['hoan_thanh']/vttb_data['van_ban']['tong_den'])*100, 1)}%",
                "ƒê·∫°t m·ª•c ti√™u"
            )
        
        with col4:
            tong_ton_kho = vttb_data['kho']['ton_hcsk'] + vttb_data['kho']['ton_lktm']
            st.metric(
                "T·ªïng t·ªìn kho",
                f"{tong_ton_kho/1e9:.1f} t·ª∑ VNƒê",
                "·ªîn ƒë·ªãnh"
            )
        
        # Bi·ªÉu ƒë·ªì t·ªïng quan
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì tr·∫°ng th√°i thi·∫øt b·ªã
            fig_status = go.Figure(data=[go.Pie(
                labels=['ƒê√£ kh·∫Øc ph·ª•c (t·∫°m th·ªùi)', 'ƒêang s·ª≠a ch·ªØa', 'ƒê√£ thanh l√Ω'],
                values=[
                    vttb_data['trang_thai_tbyt']['khac_phuc_tam_thoi'],
                    vttb_data['trang_thai_tbyt']['dang_sua_chua'],
                    vttb_data['trang_thai_tbyt']['thanh_ly']
                ],
                hole=0.4,
                marker_colors=['#28a745', '#ffc107', '#dc3545']
            )])
            fig_status.update_layout(title="Tr·∫°ng th√°i thi·∫øt b·ªã t·∫°m ng∆∞ng s·ª≠ d·ª•ng")
            st.plotly_chart(fig_status, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì so s√°nh nh·∫≠p xu·∫•t kho
            kho_data = pd.DataFrame({
                'Lo·∫°i kho': ['HCSK', 'LKTM'],
                'Nh·∫≠p kho': [vttb_data['kho']['nhap_hcsk']/1e9, vttb_data['kho']['nhap_lktm']/1e9],
                'Xu·∫•t kho': [vttb_data['kho']['xuat_hcsk']/1e9, vttb_data['kho']['xuat_lktm']/1e9]
            })
            
            fig_kho = px.bar(kho_data, x='Lo·∫°i kho', y=['Nh·∫≠p kho', 'Xu·∫•t kho'],
                            title="Nh·∫≠p xu·∫•t kho (t·ª∑ VNƒê)",
                            barmode='group',
                            color_discrete_sequence=['#4ECDC4', '#FFA07A'])
            st.plotly_chart(fig_kho, use_container_width=True)

    # VTTB - Tab S·ª≠a ch·ªØa
    with subtab2:
        st.header("üîß C√¥ng T√°c S·ª≠a Ch·ªØa Thi·∫øt B·ªã Y T·∫ø")
        
        # Metrics s·ª≠a ch·ªØa
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "C√¥ng vi·ªác ph√°t sinh",
                f"{vttb_data['sua_chua']['phat_sinh']:,}",
                "c√¥ng vi·ªác"
            )
        
        with col2:
            st.metric(
                "ƒê√£ ho√†n th√†nh",
                f"{vttb_data['sua_chua']['hoan_thanh']:,}",
                f"{vttb_data['sua_chua']['hoan_thanh'] - vttb_data['sua_chua']['phat_sinh']:+,} vs ph√°t sinh"
            )
        
        with col3:
            st.metric(
                "T·ª∑ l·ªá ho√†n th√†nh",
                f"{vttb_data['sua_chua']['ty_le_hoan_thanh']}%",
                f"{vttb_data['sua_chua']['ty_le_hoan_thanh'] - 85:.1f}% vs target 85%"
            )
        
        # Bi·ªÉu ƒë·ªì xu h∆∞·ªõng s·ª≠a ch·ªØa (mock data d·ª±a tr√™n d·ªØ li·ªáu th·ª±c)        
        # T·∫°o xu h∆∞·ªõng tƒÉng d·∫ßn
        phat_sinh_trend = [350, 380, 395, 410, 385, 402]  # T·ªïng = 2322
        hoan_thanh_trend = [290, 320, 340, 350, 315, 358]  # T·ªïng = 1973
        
        fig_trend = go.Figure()
        fig_trend.add_trace(go.Scatter(x=months, y=phat_sinh_trend, 
                                      mode='lines+markers', name='Ph√°t sinh',
                                      line=dict(color='#FF6B6B', width=3)))
        fig_trend.add_trace(go.Scatter(x=months, y=hoan_thanh_trend,
                                      mode='lines+markers', name='Ho√†n th√†nh',
                                      line=dict(color='#4ECDC4', width=3)))
        
        fig_trend.update_layout(
            title="Xu h∆∞·ªõng s·ª≠a ch·ªØa TBYT theo th√°ng",
            xaxis_title="Th√°ng",
            yaxis_title="S·ªë l∆∞·ª£ng c√¥ng vi·ªác",
            height=400
        )
        st.plotly_chart(fig_trend, use_container_width=True)
        
        # B·∫£ng chi ti·∫øt tr·∫°ng th√°i thi·∫øt b·ªã
        st.subheader("üìã Chi ti·∫øt tr·∫°ng th√°i thi·∫øt b·ªã t·∫°m ng∆∞ng")
        
        status_df = pd.DataFrame({
            'Tr·∫°ng th√°i': [
                'ƒê√£ kh·∫Øc ph·ª•c (theo d√µi ti·∫øp)',
                'ƒêang s·ª≠a ch·ªØa',
                'ƒê√£ thanh l√Ω'
            ],
            'S·ªë l∆∞·ª£ng': [
                vttb_data['trang_thai_tbyt']['khac_phuc_tam_thoi'],
                vttb_data['trang_thai_tbyt']['dang_sua_chua'],
                vttb_data['trang_thai_tbyt']['thanh_ly']
            ],
            'T·ª∑ l·ªá (%)': [
                round((vttb_data['trang_thai_tbyt']['khac_phuc_tam_thoi']/vttb_data['trang_thai_tbyt']['tong_tam_ngung'])*100, 1),
                round((vttb_data['trang_thai_tbyt']['dang_sua_chua']/vttb_data['trang_thai_tbyt']['tong_tam_ngung'])*100, 1),
                round((vttb_data['trang_thai_tbyt']['thanh_ly']/vttb_data['trang_thai_tbyt']['tong_tam_ngung'])*100, 1)
            ]
        })
        
        st.dataframe(status_df, use_container_width=True)

    # VTTB - Tab ƒê·∫•u th·∫ßu  
    with subtab3:
        st.header("üì¶ C√¥ng t√°c Mua s·∫Øm")
        
        # Metrics ƒë·∫•u th·∫ßu
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "G√≥i th·∫ßu ƒëang th·ª±c hi·ªán",
                f"{vttb_data['dau_thau']['dang_thuc_hien']}",
                "g√≥i th·∫ßu"
            )
        
        with col2:
            st.metric(
                "ƒê√£ ho√†n th√†nh",
                f"{vttb_data['dau_thau']['hoan_thanh']}",
                "g√≥i th·∫ßu"
            )
        
        with col3:
            st.metric(
                "T·ªïng gi√° tr·ªã",
                f"{vttb_data['dau_thau']['tong_gia_tri']/1e9:.1f} t·ª∑ VNƒê",
                "mua s·∫Øm"
            )
        
        # Bi·ªÉu ƒë·ªì ti·∫øn ƒë·ªô ƒë·∫•u th·∫ßu
        col1, col2 = st.columns(2)
        
        with col1:
            # Pie chart ti·∫øn ƒë·ªô
            fig_progress = go.Figure(data=[go.Pie(
                labels=['ƒê√£ ho√†n th√†nh', 'ƒêang th·ª±c hi·ªán'],
                values=[vttb_data['dau_thau']['hoan_thanh'], vttb_data['dau_thau']['dang_thuc_hien']],
                hole=0.4,
                marker_colors=['#28a745', '#ffc107']
            )])
            fig_progress.update_layout(title="Ti·∫øn ƒë·ªô th·ª±c hi·ªán g√≥i th·∫ßu")
            st.plotly_chart(fig_progress, use_container_width=True)
        
        with col2:
            # Xu h∆∞·ªõng ho√†n th√†nh theo th√°ng (mock data)
            completion_trend = [6, 8, 9, 10, 9, 9]  # T·ªïng = 51
            
            fig_completion = px.bar(
                x=months, y=completion_trend,
                title="G√≥i th·∫ßu ho√†n th√†nh theo th√°ng",
                color=completion_trend,
                color_continuous_scale='Teal'
            )
            fig_completion.update_layout(showlegend=False)
            st.plotly_chart(fig_completion, use_container_width=True)

    # VTTB - Tab VƒÉn b·∫£n
    with subtab4:
        st.header("üìÑ X·ª≠ L√Ω H·ªì S∆° & VƒÉn B·∫£n")
        
        # Metrics vƒÉn b·∫£n
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ªïng vƒÉn b·∫£n ƒë·∫øn",
                f"{vttb_data['van_ban']['tong_den']:,}",
                "vƒÉn b·∫£n"
            )
        
        with col2:
            st.metric(
                "ƒê√£ ho√†n th√†nh",
                f"{vttb_data['van_ban']['hoan_thanh']:,}",
                f"{round((vttb_data['van_ban']['hoan_thanh']/vttb_data['van_ban']['tong_den'])*100, 1)}%"
            )
        
        with col3:
            st.metric(
                "ƒêang x·ª≠ l√Ω",
                f"{vttb_data['van_ban']['dang_xu_ly']}",
                f"{vttb_data['van_ban']['ty_le_dang_xu_ly']}%"
            )
        
        with col4:
            st.metric(
                "Ch∆∞a x·ª≠ l√Ω",
                f"{vttb_data['van_ban']['chua_xu_ly']}",
                f"{vttb_data['van_ban']['ty_le_chua_xu_ly']}%"
            )
        
        # Bi·ªÉu ƒë·ªì tr·∫°ng th√°i vƒÉn b·∫£n
        col1, col2 = st.columns(2)
        
        with col1:
            # Donut chart tr·∫°ng th√°i
            fig_status = go.Figure(data=[go.Pie(
                labels=['ƒê√£ ho√†n th√†nh', 'ƒêang x·ª≠ l√Ω', 'Ch∆∞a x·ª≠ l√Ω'],
                values=[
                    vttb_data['van_ban']['hoan_thanh'],
                    vttb_data['van_ban']['dang_xu_ly'],
                    vttb_data['van_ban']['chua_xu_ly']
                ],
                hole=0.4,
                marker_colors=['#28a745', '#ffc107', '#dc3545']
            )])
            fig_status.update_layout(title="Tr·∫°ng th√°i x·ª≠ l√Ω vƒÉn b·∫£n")
            st.plotly_chart(fig_status, use_container_width=True)
        
        with col2:
            # Progress bar
            progress = (vttb_data['van_ban']['hoan_thanh'] / vttb_data['van_ban']['tong_den']) * 100
            
            fig_progress = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = progress,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "T·ª∑ l·ªá ho√†n th√†nh (%)"},
                delta = {'reference': 95, 'increasing': {'color': "green"}},
                gauge = {
                    'axis': {'range': [None, 100]},
                    'bar': {'color': "#4ECDC4"},
                    'steps': [
                        {'range': [0, 80], 'color': "lightgray"},
                        {'range': [80, 95], 'color': "yellow"},
                        {'range': [95, 100], 'color': "lightgreen"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 95
                    }
                }
            ))
            fig_progress.update_layout(height=300)
            st.plotly_chart(fig_progress, use_container_width=True)

    # VTTB - Tab Kho
    with subtab5:
        st.header("üè™ C√¥ng T√°c Cung ·ª®ng & Qu·∫£n L√Ω Kho")
        
        # Hi·ªÉn th·ªã th√¥ng tin t·ªïng quan
        st.subheader("üìà T·ªïng Quan Xu·∫•t Nh·∫≠p T·ªìn (6 th√°ng ƒë·∫ßu nƒÉm 2025)")
        
        # Metrics kho - chia th√†nh 2 h√†ng
        st.write("**üè™ KHO HCSK (H√†nh ch√≠nh s·ª± nghi·ªáp)**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "T·ªïng nh·∫≠p kho",
                f"{vttb_data['kho']['nhap_hcsk']/1e9:.2f} t·ª∑ VNƒê",
                "6 th√°ng"
            )
        
        with col2:
            st.metric(
                "T·ªïng xu·∫•t kho", 
                f"{vttb_data['kho']['xuat_hcsk']/1e9:.2f} t·ª∑ VNƒê",
                "6 th√°ng"
            )
        
        with col3:
            st.metric(
                "T·ªìn kho hi·ªán t·∫°i",
                f"{vttb_data['kho']['ton_hcsk']/1e9:.3f} t·ª∑ VNƒê",
                f"{((vttb_data['kho']['ton_hcsk']/vttb_data['kho']['nhap_hcsk'])*100):.1f}% nh·∫≠p kho"
            )
        
        st.write("**üè≠ KHO LKTM (L√¢m s√†ng k·ªπ thu·∫≠t)**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "T·ªïng nh·∫≠p kho",
                f"{vttb_data['kho']['nhap_lktm']/1e9:.2f} t·ª∑ VNƒê",
                "6 th√°ng"
            )
        
        with col2:
            st.metric(
                "T·ªïng xu·∫•t kho",
                f"{vttb_data['kho']['xuat_lktm']/1e9:.2f} t·ª∑ VNƒê",
                "6 th√°ng"
            )
        
        with col3:
            st.metric(
                "T·ªìn kho hi·ªán t·∫°i",
                f"{vttb_data['kho']['ton_lktm']/1e9:.3f} t·ª∑ VNƒê", 
                f"{((vttb_data['kho']['ton_lktm']/vttb_data['kho']['nhap_lktm'])*100):.1f}% nh·∫≠p kho"
            )
        
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch kho
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì c·ªôt so s√°nh nh·∫≠p xu·∫•t t·ªìn
            kho_data = pd.DataFrame({
                'Lo·∫°i kho': ['HCSK', 'HCSK', 'HCSK', 'LKTM', 'LKTM', 'LKTM'],
                'Ho·∫°t ƒë·ªông': ['Nh·∫≠p', 'Xu·∫•t', 'T·ªìn', 'Nh·∫≠p', 'Xu·∫•t', 'T·ªìn'],
                'Gi√° tr·ªã (t·ª∑ VNƒê)': [
                    vttb_data['kho']['nhap_hcsk']/1e9,
                    vttb_data['kho']['xuat_hcsk']/1e9,
                    vttb_data['kho']['ton_hcsk']/1e9,
                    vttb_data['kho']['nhap_lktm']/1e9,
                    vttb_data['kho']['xuat_lktm']/1e9,
                    vttb_data['kho']['ton_lktm']/1e9
                ]
            })
            
            fig_kho_detail = px.bar(kho_data, x='Lo·∫°i kho', y='Gi√° tr·ªã (t·ª∑ VNƒê)',
                                   color='Ho·∫°t ƒë·ªông', barmode='group',
                                   title="So s√°nh Nh·∫≠p - Xu·∫•t - T·ªìn kho",
                                   color_discrete_sequence=['#4ECDC4', '#FF6B6B', '#FFA500'])
            fig_kho_detail.update_layout(height=400)
            st.plotly_chart(fig_kho_detail, use_container_width=True)
        
        with col2:
            # Pie chart t·ª∑ l·ªá t·ªìn kho
            ton_kho_data = pd.DataFrame({
                'Kho': ['HCSK', 'LKTM'],
                'T·ªìn kho (t·ª∑ VNƒê)': [
                    vttb_data['kho']['ton_hcsk']/1e9,
                    vttb_data['kho']['ton_lktm']/1e9
                ],
                'T·ª∑ l·ªá (%)': [
                    (vttb_data['kho']['ton_hcsk']/(vttb_data['kho']['ton_hcsk']+vttb_data['kho']['ton_lktm']))*100,
                    (vttb_data['kho']['ton_lktm']/(vttb_data['kho']['ton_hcsk']+vttb_data['kho']['ton_lktm']))*100
                ]
            })
            
            fig_inventory = px.pie(ton_kho_data, values='T·ªìn kho (t·ª∑ VNƒê)', names='Kho',
                                  title="C∆° c·∫•u t·ªìn kho hi·ªán t·∫°i",
                                  color_discrete_sequence=['#4ECDC4', '#FF9999'])
            
            # Th√™m th√¥ng tin t·ª∑ l·ªá v√†o labels
            fig_inventory.update_traces(
                textposition='inside', 
                textinfo='percent+label',
                hovertemplate='<b>%{label}</b><br>Gi√° tr·ªã: %{value:.3f} t·ª∑ VNƒê<br>T·ª∑ l·ªá: %{percent}<extra></extra>'
            )
            fig_inventory.update_layout(height=400)
            st.plotly_chart(fig_inventory, use_container_width=True)
        
        # Bi·ªÉu ƒë·ªì d√≤ng ti·ªÅn kho
        st.subheader("üí∞ Ph√¢n T√≠ch D√≤ng Ti·ªÅn Kho")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # T·ª∑ l·ªá xu·∫•t/nh·∫≠p
            ty_le_hcsk = (vttb_data['kho']['xuat_hcsk']/vttb_data['kho']['nhap_hcsk'])*100
            ty_le_lktm = (vttb_data['kho']['xuat_lktm']/vttb_data['kho']['nhap_lktm'])*100
            
            efficiency_data = pd.DataFrame({
                'Kho': ['HCSK', 'LKTM'],
                'T·ª∑ l·ªá xu·∫•t/nh·∫≠p (%)': [ty_le_hcsk, ty_le_lktm]
            })
            
            fig_efficiency = px.bar(efficiency_data, x='Kho', y='T·ª∑ l·ªá xu·∫•t/nh·∫≠p (%)',
                                   title="Hi·ªáu qu·∫£ s·ª≠ d·ª•ng kho (Xu·∫•t/Nh·∫≠p)",
                                   color='T·ª∑ l·ªá xu·∫•t/nh·∫≠p (%)',
                                   color_continuous_scale='Viridis',
                                   text='T·ª∑ l·ªá xu·∫•t/nh·∫≠p (%)')
            
            fig_efficiency.update_traces(texttemplate='%{text:.1f}%', textposition='outside')
            fig_efficiency.add_hline(y=100, line_dash="dash", line_color="red", 
                                   annotation_text="M·ª•c ti√™u 100%")
            st.plotly_chart(fig_efficiency, use_container_width=True)
        
        with col2:
            # Xu h∆∞·ªõng t·ªìn kho (mock data - chia ƒë·ªÅu 6 th√°ng)
            months = ['T1', 'T2', 'T3', 'T4', 'T5', 'T6']
            
            # Gi·∫£ s·ª≠ t·ªìn kho tƒÉng d·∫ßn qua c√°c th√°ng
            ton_hcsk_trend = np.linspace(500, vttb_data['kho']['ton_hcsk']/1e6, 6)
            ton_lktm_trend = np.linspace(600, vttb_data['kho']['ton_lktm']/1e6, 6)
            
            fig_trend = go.Figure()
            fig_trend.add_trace(go.Scatter(x=months, y=ton_hcsk_trend,
                                          mode='lines+markers', name='HCSK',
                                          line=dict(color='#4ECDC4', width=3)))
            fig_trend.add_trace(go.Scatter(x=months, y=ton_lktm_trend,
                                          mode='lines+markers', name='LKTM',
                                          line=dict(color='#FF6B6B', width=3)))
            
            fig_trend.update_layout(
                title="Xu h∆∞·ªõng t·ªìn kho theo th√°ng",
                xaxis_title="Th√°ng",
                yaxis_title="T·ªìn kho (tri·ªáu VNƒê)",
                height=400
            )
            st.plotly_chart(fig_trend, use_container_width=True)
        
        # B·∫£ng chi ti·∫øt ƒë·∫ßy ƒë·ªß
        st.subheader("üìä B·∫£ng T·ªïng H·ª£p Chi Ti·∫øt Xu·∫•t Nh·∫≠p T·ªìn")
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë b·ªï sung
        tong_nhap = vttb_data['kho']['nhap_hcsk'] + vttb_data['kho']['nhap_lktm']
        tong_xuat = vttb_data['kho']['xuat_hcsk'] + vttb_data['kho']['xuat_lktm']
        tong_ton = vttb_data['kho']['ton_hcsk'] + vttb_data['kho']['ton_lktm']
        
        inventory_detail = pd.DataFrame({
            'Lo·∫°i kho': ['HCSK', 'LKTM', 'üìä T·ªîNG C·ªòNG'],
            'Nh·∫≠p kho (VNƒê)': [
                f"{vttb_data['kho']['nhap_hcsk']:,}",
                f"{vttb_data['kho']['nhap_lktm']:,}",
                f"{tong_nhap:,}"
            ],
            'Xu·∫•t kho (VNƒê)': [
                f"{vttb_data['kho']['xuat_hcsk']:,}",
                f"{vttb_data['kho']['xuat_lktm']:,}",
                f"{tong_xuat:,}"
            ],
            'T·ªìn kho (VNƒê)': [
                f"{vttb_data['kho']['ton_hcsk']:,}",
                f"{vttb_data['kho']['ton_lktm']:,}",
                f"{tong_ton:,}"
            ],
            'T·ª∑ l·ªá xu·∫•t/nh·∫≠p (%)': [
                f"{(vttb_data['kho']['xuat_hcsk']/vttb_data['kho']['nhap_hcsk']*100):.1f}%",
                f"{(vttb_data['kho']['xuat_lktm']/vttb_data['kho']['nhap_lktm']*100):.1f}%",
                f"{(tong_xuat/tong_nhap*100):.1f}%"
            ],
            'T·ª∑ l·ªá t·ªìn/nh·∫≠p (%)': [
                f"{(vttb_data['kho']['ton_hcsk']/vttb_data['kho']['nhap_hcsk']*100):.1f}%",
                f"{(vttb_data['kho']['ton_lktm']/vttb_data['kho']['nhap_lktm']*100):.1f}%",
                f"{(tong_ton/tong_nhap*100):.1f}%"
            ]
        })
        
        st.dataframe(inventory_detail, use_container_width=True)
        
        # Th√¥ng tin ph√¢n t√≠ch
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("üìà **Ph√¢n t√≠ch hi·ªáu qu·∫£:**")
            st.write(f"‚Ä¢ T·ªïng v√≤ng quay kho: **{(tong_xuat/tong_nhap*100):.1f}%**")
            st.write(f"‚Ä¢ Kho HCSK hi·ªáu qu·∫£ h∆°n: **{ty_le_hcsk:.1f}%** vs LKTM **{ty_le_lktm:.1f}%**")
            st.write(f"‚Ä¢ T·ªìn kho an to√†n: **{(tong_ton/1e9):.2f} t·ª∑ VNƒê**")
        
        with col2:
            st.success("‚úÖ **Khuy·∫øn ngh·ªã:**")
            if ty_le_hcsk > 95:
                st.write("‚Ä¢ Kho HCSK: Hi·ªáu qu·∫£ t·ªët, duy tr√¨")
            else:
                st.write("‚Ä¢ Kho HCSK: C·∫ßn tƒÉng t·ªëc ƒë·ªô xu·∫•t kho")
            
            if ty_le_lktm > 95:
                st.write("‚Ä¢ Kho LKTM: Hi·ªáu qu·∫£ t·ªët, duy tr√¨")
            else:
                st.write("‚Ä¢ Kho LKTM: C·∫ßn t·ªëi ∆∞u quy tr√¨nh xu·∫•t kho")
            st.write("‚Ä¢ Theo d√µi t·ªìn kho ƒë·ªÉ tr√°nh ·ª© ƒë·ªçng")

# ==================== TAB KHOA KSKTYC ====================
with tab_ksktyc:
    st.markdown("""
    <div class="section-header">
        <h2>ü©∫ KH√ÅM S·ª®C KH·ªéE THEO Y√äU C·∫¶U</h2>
        <p>Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥, c√° nh√¢n v√† doanh nghi·ªáp</p>
    </div>
    """, unsafe_allow_html=True)
    
    # T·ªïng quan KPIs ch√≠nh
    tong_kham = ksktyc_data["kham_khong_nn"]["value"] + ksktyc_data["kham_co_nn"]["value"]
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng l∆∞·ª£t kh√°m", f"{tong_kham:,}", "ng∆∞·ªùi")
    
    with col2:
        st.metric("Kh√°m ƒë·ªãnh k·ª≥", f"{ksktyc_data['kham_dinh_ky']['value']:,}", 
                 f"+{ksktyc_data['kham_dinh_ky']['growth']:.1f}%")
    
    with col3:
        st.metric("Kh√°m c√≥ y·∫øu t·ªë NN", f"{ksktyc_data['kham_co_nn']['value']:,}", 
                 f"+{ksktyc_data['kham_co_nn']['growth']:.0f}%")
    
    with col4:
        ty_le_noi_vien = (ksktyc_data['kham_noi_vien']['value'] / tong_kham) * 100
        st.metric("T·ª∑ l·ªá n·ªôi vi·ªán", f"{ty_le_noi_vien:.1f}%", 
                 f"+{ksktyc_data['kham_noi_vien']['growth']:.1f}%")
    
    # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
    col1, col2 = st.columns(2)
    
    with col1:
        # Ph√¢n lo·∫°i theo ngu·ªìn
        labels_nguon = ['Kh√¥ng c√≥ y·∫øu t·ªë NN', 'C√≥ y·∫øu t·ªë NN', 'L√°i xe']
        values_nguon = [
            ksktyc_data['kham_khong_nn']['value'],
            ksktyc_data['kham_co_nn']['value'], 
            ksktyc_data['kham_lai_xe']['value']
        ]
        
        fig_nguon = go.Figure(data=[go.Pie(
            labels=labels_nguon,
            values=values_nguon,
            hole=0.4,
            marker_colors=['#4ECDC4', '#FF6B6B', '#FFA07A']
        )])
        fig_nguon.update_layout(title="Ph√¢n lo·∫°i theo y·∫øu t·ªë n∆∞·ªõc ngo√†i")
        st.plotly_chart(fig_nguon, use_container_width=True)
    
    with col2:
        # So s√°nh n·ªôi vs ngo·∫°i vi·ªán
        location_data = pd.DataFrame({
            'ƒê·ªãa ƒëi·ªÉm': ['N·ªôi vi·ªán', 'Ngo·∫°i vi·ªán'],
            'S·ªë l∆∞·ª£t': [
                ksktyc_data['kham_noi_vien']['value'],
                ksktyc_data['kham_ngoai_vien']['value']
            ],
            'TƒÉng tr∆∞·ªüng': [
                ksktyc_data['kham_noi_vien']['growth'],
                ksktyc_data['kham_ngoai_vien']['growth']
            ]
        })
        
        fig_location = px.bar(location_data, x='ƒê·ªãa ƒëi·ªÉm', y='S·ªë l∆∞·ª£t',
                             title="So s√°nh n·ªôi vi·ªán vs ngo·∫°i vi·ªán",
                             color='TƒÉng tr∆∞·ªüng',
                             color_continuous_scale='RdYlGn',
                             text='S·ªë l∆∞·ª£t')
        fig_location.update_traces(texttemplate='%{text:,}', textposition='outside')
        st.plotly_chart(fig_location, use_container_width=True)
    
    # Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng
    st.subheader("üìà TƒÉng Tr∆∞·ªüng So V·ªõi C√πng K·ª≥")
    
    growth_data = pd.DataFrame({
        'Lo·∫°i kh√°m': [
            'Kh√¥ng c√≥ NN', 'C√≥ NN', 'ƒê·ªãnh k·ª≥', 'H·ª£p ƒë·ªìng', 
            'Kh√¥ng h·ª£p ƒë·ªìng', 'C√° nh√¢n', 'N·ªôi vi·ªán', 'Ngo·∫°i vi·ªán'
        ],
        'TƒÉng tr∆∞·ªüng (%)': [
            ksktyc_data['kham_khong_nn']['growth'],
            ksktyc_data['kham_co_nn']['growth'],
            ksktyc_data['kham_dinh_ky']['growth'],
            ksktyc_data['kham_hop_dong']['growth'],
            ksktyc_data['kham_khong_hop_dong']['growth'],
            ksktyc_data['kham_ca_nhan']['growth'],
            ksktyc_data['kham_noi_vien']['growth'],
            ksktyc_data['kham_ngoai_vien']['growth']
        ]
    })
    
    fig_growth = px.bar(growth_data, x='Lo·∫°i kh√°m', y='TƒÉng tr∆∞·ªüng (%)',
                       title="TƒÉng tr∆∞·ªüng theo lo·∫°i kh√°m s·ª©c kh·ªèe",
                       color='TƒÉng tr∆∞·ªüng (%)',
                       color_continuous_scale='RdYlGn')
    fig_growth.update_layout(xaxis_tickangle=-45)
    st.plotly_chart(fig_growth, use_container_width=True)
    
    # B·∫£ng chi ti·∫øt
    st.subheader("üìã B·∫£ng Chi Ti·∫øt Kh√°m S·ª©c Kh·ªèe")
    
    detail_data = pd.DataFrame({
        'STT': [1, 2, 3, 4, 5, 6, 7, 8, 9],
        'N·ªôi dung': [
            'Kh√°m KH√îNG c√≥ y·∫øu t·ªë n∆∞·ªõc ngo√†i',
            'Kh√°m C√ì y·∫øu t·ªë n∆∞·ªõc ngo√†i', 
            'Kh√°m s·ª©c kh·ªèe l√°i xe',
            'Kh√°m s·ª©c kh·ªèe ƒë·ªãnh k·ª≥',
            'Kh√°m theo h·ª£p ƒë·ªìng',
            'Kh√°m kh√¥ng h·ª£p ƒë·ªìng',
            'Kh√°m c√° nh√¢n',
            'Kh√°m n·ªôi vi·ªán',
            'Kh√°m ngo·∫°i vi·ªán'
        ],
        'S·ªë li·ªáu 6 th√°ng 2025': [
            f"{ksktyc_data['kham_khong_nn']['value']:,}",
            f"{ksktyc_data['kham_co_nn']['value']:,}",
            f"{ksktyc_data['kham_lai_xe']['value']:,}",
            f"{ksktyc_data['kham_dinh_ky']['value']:,}",
            f"{ksktyc_data['kham_hop_dong']['value']:,}",
            f"{ksktyc_data['kham_khong_hop_dong']['value']:,}",
            f"{ksktyc_data['kham_ca_nhan']['value']:,}",
            f"{ksktyc_data['kham_noi_vien']['value']:,}",
            f"{ksktyc_data['kham_ngoai_vien']['value']:,}"
        ],
        'So s√°nh c√πng k·ª≥ (%)': [
            f"+{ksktyc_data['kham_khong_nn']['growth']:.2f}%",
            f"+{ksktyc_data['kham_co_nn']['growth']:.2f}%",
            "0%",
            f"+{ksktyc_data['kham_dinh_ky']['growth']:.2f}%",
            f"+{ksktyc_data['kham_hop_dong']['growth']:.2f}%",
            f"+{ksktyc_data['kham_khong_hop_dong']['growth']:.2f}%",
            f"+{ksktyc_data['kham_ca_nhan']['growth']:.2f}%",
            f"+{ksktyc_data['kham_noi_vien']['growth']:.2f}%",
            f"{ksktyc_data['kham_ngoai_vien']['growth']:.2f}%"
        ],
        'Xu h∆∞·ªõng': [
            'üìà' if ksktyc_data['kham_khong_nn']['growth'] > 0 else 'üìâ',
            'üìà' if ksktyc_data['kham_co_nn']['growth'] > 0 else 'üìâ',
            '‚ûñ',
            'üìà' if ksktyc_data['kham_dinh_ky']['growth'] > 0 else 'üìâ',
            'üìà' if ksktyc_data['kham_hop_dong']['growth'] > 0 else 'üìâ',
            'üìà' if ksktyc_data['kham_khong_hop_dong']['growth'] > 0 else 'üìâ',
            'üìà' if ksktyc_data['kham_ca_nhan']['growth'] > 0 else 'üìâ',
            'üìà' if ksktyc_data['kham_noi_vien']['growth'] > 0 else 'üìâ',
            'üìà' if ksktyc_data['kham_ngoai_vien']['growth'] > 0 else 'üìâ'
        ]
    })
    
    st.dataframe(detail_data, use_container_width=True)
    
    # Insights
    st.subheader("üí° Ph√¢n T√≠ch & Nh·∫≠n X√©t")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("üéâ **ƒêi·ªÉm n·ªïi b·∫≠t:**")
        st.write("‚Ä¢ TƒÉng tr∆∞·ªüng m·∫°nh kh√°m c√≥ y·∫øu t·ªë NN (+751%)")
        st.write("‚Ä¢ Kh√°m kh√¥ng h·ª£p ƒë·ªìng tƒÉng 63.3%")
        st.write("‚Ä¢ Kh√°m n·ªôi vi·ªán tƒÉng tr∆∞·ªüng t·ªët (+20.2%)")
        st.write("‚Ä¢ T·ªïng l∆∞·ª£t kh√°m ƒë·∫°t 27,177 ng∆∞·ªùi")
    
    with col2:
        st.warning("‚ö†Ô∏è **C·∫ßn l∆∞u √Ω:**")
        st.write("‚Ä¢ Kh√°m ngo·∫°i vi·ªán gi·∫£m 9.97%") 
        st.write("‚Ä¢ Kh√°m l√°i xe = 0 (c·∫ßn kh·∫£o s√°t)")
        st.write("‚Ä¢ TƒÉng tr∆∞·ªüng h·ª£p ƒë·ªìng ch·∫≠m (2.69%)")
        st.write("‚Ä¢ C·∫ßn m·ªü r·ªông d·ªãch v·ª• ngo·∫°i vi·ªán")

# ==================== TAB PH√íNG CNTT ====================
with tab_cntt:
    st.markdown("""
    <div class="section-header">
        <h2>üíª C√îNG NGH·ªÜ TH√îNG TIN</h2>
        <p>Qu·∫£n l√Ω h·∫° t·∫ßng CNTT, h·ªó tr·ª£ k·ªπ thu·∫≠t v√† ph√°t tri·ªÉn ·ª©ng d·ª•ng</p>
    </div>
    """, unsafe_allow_html=True)
    
    # T·ªïng quan thi·∫øt b·ªã
    st.subheader("üñ•Ô∏è T·ªïng Quan Thi·∫øt B·ªã CNTT")
    
    # T√≠nh t·ªïng thi·∫øt b·ªã
    tong_thiet_bi = sum([item["quantity"] for item in cntt_data["thiet_bi"].values()])
    
    # KPI Cards ch√≠nh
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "T·ªïng thi·∫øt b·ªã CNTT",
            f"{tong_thiet_bi:,}",
            "thi·∫øt b·ªã"
        )
    
    with col2:
        st.metric(
            "M√°y vi t√≠nh",
            f"{cntt_data['thiet_bi']['may_vi_tinh']['quantity']:,}",
            f"{(cntt_data['thiet_bi']['may_vi_tinh']['quantity']/tong_thiet_bi*100):.1f}% t·ªïng TB"
        )
    
    with col3:
        st.metric(
            "T·ª∑ l·ªá gi·∫£i quy·∫øt y√™u c·∫ßu",
            f"{cntt_data['hoat_dong']['giai_quyet_de_nghi']['value']:.1f}%",
            f"+{cntt_data['hoat_dong']['giai_quyet_de_nghi']['value'] - cntt_data['hoat_dong']['giai_quyet_de_nghi']['comparison']:.1f}%"
        )
    
    with col4:
        st.metric(
            "ƒêƒÉng k√Ω kh√°m online",
            f"{cntt_data['hoat_dong']['dang_ky_kham_online']['value']:,}",
            f"+{cntt_data['hoat_dong']['dang_ky_kham_online']['value'] - cntt_data['hoat_dong']['dang_ky_kham_online']['comparison']:,}"
        )
    
    # Ph√¢n lo·∫°i thi·∫øt b·ªã
    st.subheader("üìä Ph√¢n Lo·∫°i Thi·∫øt B·ªã Theo Ch·ª©c NƒÉng")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Nh√≥m thi·∫øt b·ªã theo ch·ª©c nƒÉng
        may_tinh_nhom = cntt_data['thiet_bi']['laptop']['quantity'] + cntt_data['thiet_bi']['may_vi_tinh']['quantity'] + cntt_data['thiet_bi']['may_tinh_bang']['quantity']
        may_in_nhom = cntt_data['thiet_bi']['may_in_laser']['quantity'] + cntt_data['thiet_bi']['may_in_mau']['quantity'] + cntt_data['thiet_bi']['may_in_ma_vach']['quantity'] + cntt_data['thiet_bi']['may_in_nhiet']['quantity'] + cntt_data['thiet_bi']['may_in_the']['quantity']
        mang_nhom = cntt_data['thiet_bi']['switch']['quantity'] + cntt_data['thiet_bi']['access_point']['quantity'] + cntt_data['thiet_bi']['router']['quantity'] + cntt_data['thiet_bi']['wifi_controller']['quantity']
        server_nhom = cntt_data['thiet_bi']['server_vat_ly']['quantity'] + cntt_data['thiet_bi']['server_ao_hoa']['quantity'] + cntt_data['thiet_bi']['san']['quantity'] + cntt_data['thiet_bi']['das']['quantity'] + cntt_data['thiet_bi']['nas']['quantity']
        
        nhom_data = pd.DataFrame({
            'Nh√≥m thi·∫øt b·ªã': ['M√°y t√≠nh', 'M√°y in', 'Thi·∫øt b·ªã m·∫°ng', 'Server & Storage', 'Kh√°c'],
            'S·ªë l∆∞·ª£ng': [
                may_tinh_nhom,
                may_in_nhom, 
                mang_nhom,
                server_nhom,
                tong_thiet_bi - may_tinh_nhom - may_in_nhom - mang_nhom - server_nhom
            ]
        })
        
        fig_nhom = px.pie(nhom_data, values='S·ªë l∆∞·ª£ng', names='Nh√≥m thi·∫øt b·ªã',
                         title="Ph√¢n b·ªï thi·∫øt b·ªã theo nh√≥m ch·ª©c nƒÉng",
                         color_discrete_sequence=['#4ECDC4', '#FF6B6B', '#FFA500', '#32CD32', '#DA70D6'])
        fig_nhom.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_nhom, use_container_width=True)
    
    with col2:
        # Top 10 thi·∫øt b·ªã nhi·ªÅu nh·∫•t
        thiet_bi_list = [(item["name"], item["quantity"]) for item in cntt_data["thiet_bi"].values()]
        thiet_bi_list.sort(key=lambda x: x[1], reverse=True)
        top_10 = thiet_bi_list[:10]
        
        top_10_df = pd.DataFrame(top_10, columns=['Thi·∫øt b·ªã', 'S·ªë l∆∞·ª£ng'])
        
        fig_top10 = px.bar(top_10_df, x='S·ªë l∆∞·ª£ng', y='Thi·∫øt b·ªã',
                          title="Top 10 thi·∫øt b·ªã nhi·ªÅu nh·∫•t", 
                          orientation='h',
                          color='S·ªë l∆∞·ª£ng',
                          color_continuous_scale='Blues')
        fig_top10.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig_top10, use_container_width=True)
    
    # Ho·∫°t ƒë·ªông h·ªó tr·ª£
    st.subheader("üõ†Ô∏è Ho·∫°t ƒê·ªông H·ªó Tr·ª£ & Ph√°t Tri·ªÉn")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "H·ªó tr·ª£ ph·∫ßn c·ª©ng",
            f"{cntt_data['hoat_dong']['ho_tro_phan_cung']['value']:,}",
            f"{cntt_data['hoat_dong']['ho_tro_phan_cung']['value'] - cntt_data['hoat_dong']['ho_tro_phan_cung']['comparison']:+,} l∆∞·ª£t"
        )
    
    with col2:
        st.metric(
            "H·ªó tr·ª£ ph·∫ßn m·ªÅm",
            f"{cntt_data['hoat_dong']['ho_tro_phan_mem']['value']:,}",
            f"{cntt_data['hoat_dong']['ho_tro_phan_mem']['value'] - cntt_data['hoat_dong']['ho_tro_phan_mem']['comparison']:+,} l∆∞·ª£t"
        )
    
    with col3:
        st.metric(
            "Ch·ª©c nƒÉng m·ªõi",
            f"{cntt_data['hoat_dong']['trien_khai_chuc_nang']['value']}",
            f"{cntt_data['hoat_dong']['trien_khai_chuc_nang']['value'] - cntt_data['hoat_dong']['trien_khai_chuc_nang']['comparison']:+,} ch·ª©c nƒÉng"
        )
    
    with col4:
        st.metric(
            "Tham quan CNTT",
            f"{cntt_data['hoat_dong']['tham_quan']['value']}",
            f"{cntt_data['hoat_dong']['tham_quan']['value'] - cntt_data['hoat_dong']['tham_quan']['comparison']:+,} ƒëo√†n"
        )
    
    # Bi·ªÉu ƒë·ªì so s√°nh hi·ªáu su·∫•t
    col1, col2 = st.columns(2)
    
    with col1:
        # So s√°nh ho·∫°t ƒë·ªông 2 k·ª≥
        hoat_dong_comparison = []
        for key, item in cntt_data['hoat_dong'].items():
            hoat_dong_comparison.append({
                'Ho·∫°t ƒë·ªông': item['name'][:20] + '...' if len(item['name']) > 20 else item['name'],
                'K·ª≥ hi·ªán t·∫°i': item['value'],
                'K·ª≥ tr∆∞·ªõc': item['comparison'],
                'ƒê∆°n v·ªã': item['unit']
            })
        
        comparison_df = pd.DataFrame(hoat_dong_comparison)
        
        # Ch·ªâ hi·ªÉn th·ªã 5 ho·∫°t ƒë·ªông ch√≠nh
        comparison_df_main = comparison_df.head(4)
        
        fig_comparison = px.bar(comparison_df_main, x='Ho·∫°t ƒë·ªông', y=['K·ª≥ hi·ªán t·∫°i', 'K·ª≥ tr∆∞·ªõc'],
                               title="So s√°nh hi·ªáu su·∫•t c√°c ho·∫°t ƒë·ªông",
                               barmode='group',
                               color_discrete_sequence=['#4ECDC4', '#FF6B6B'])
        fig_comparison.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig_comparison, use_container_width=True)
    
    with col2:
        # M·ª©c ƒë·ªô tƒÉng tr∆∞·ªüng
        growth_data = []
        for key, item in cntt_data['hoat_dong'].items():
            if item['comparison'] > 0:
                growth_rate = ((item['value'] - item['comparison']) / item['comparison']) * 100
                growth_data.append({
                    'Ho·∫°t ƒë·ªông': item['name'][:15] + '...' if len(item['name']) > 15 else item['name'],
                    'TƒÉng tr∆∞·ªüng (%)': growth_rate
                })
        
        growth_df = pd.DataFrame(growth_data)
        
        fig_growth = px.bar(growth_df, x='Ho·∫°t ƒë·ªông', y='TƒÉng tr∆∞·ªüng (%)',
                           title="TƒÉng tr∆∞·ªüng c√°c ho·∫°t ƒë·ªông (%)",
                           color='TƒÉng tr∆∞·ªüng (%)',
                           color_continuous_scale='RdYlGn')
        fig_growth.update_layout(xaxis_tickangle=-45)
        fig_growth.add_hline(y=0, line_dash="dash", line_color="black")
        st.plotly_chart(fig_growth, use_container_width=True)
    
    # B·∫£ng chi ti·∫øt thi·∫øt b·ªã
    st.subheader("üìã B·∫£ng Chi Ti·∫øt Thi·∫øt B·ªã CNTT")
    
    # T·∫°o DataFrame cho thi·∫øt b·ªã
    thiet_bi_detail = []
    for i, (key, item) in enumerate(cntt_data["thiet_bi"].items(), 1):
        thiet_bi_detail.append({
            'STT': i,
            'T√™n thi·∫øt b·ªã': item["name"],
            'S·ªë l∆∞·ª£ng': item["quantity"],
            'T·ª∑ l·ªá (%)': f"{(item['quantity']/tong_thiet_bi*100):.1f}%",
            'Tr·∫°ng th√°i': '‚úÖ Ho·∫°t ƒë·ªông' if item["quantity"] > 0 else '‚ùå Kh√¥ng c√≥'
        })
    
    thiet_bi_df = pd.DataFrame(thiet_bi_detail)
    st.dataframe(thiet_bi_df, use_container_width=True)
    
    # B·∫£ng ho·∫°t ƒë·ªông
    st.subheader("üìä B·∫£ng Ho·∫°t ƒê·ªông & H·ªó Tr·ª£")
    
    hoat_dong_detail = []
    for i, (key, item) in enumerate(cntt_data["hoat_dong"].items(), 1):
        if item['comparison'] > 0:
            change = item['value'] - item['comparison']
            change_percent = (change / item['comparison']) * 100
            change_text = f"{change:+,} ({change_percent:+.1f}%)"
        else:
            change_text = "N/A"
            
        hoat_dong_detail.append({
            'STT': i,
            'Ho·∫°t ƒë·ªông': item["name"],
            'K·ª≥ hi·ªán t·∫°i': f"{item['value']:,} {item['unit']}",
            'K·ª≥ tr∆∞·ªõc': f"{item['comparison']:,} {item['unit']}" if item['comparison'] > 0 else "N/A",
            'Thay ƒë·ªïi': change_text,
            'Xu h∆∞·ªõng': 'üìà' if item['value'] > item['comparison'] else 'üìâ' if item['value'] < item['comparison'] else '‚ûñ'
        })
    
    hoat_dong_df = pd.DataFrame(hoat_dong_detail)
    st.dataframe(hoat_dong_df, use_container_width=True)
    
    # Insights
    st.subheader("üí° Ph√¢n T√≠ch & ƒê√°nh Gi√°")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("üéâ **Th√†nh t·ª±u n·ªïi b·∫≠t:**")
        st.write("‚Ä¢ T·ªïng thi·∫øt b·ªã CNTT: **4,796 thi·∫øt b·ªã**")
        st.write("‚Ä¢ T·ª∑ l·ªá gi·∫£i quy·∫øt y√™u c·∫ßu: **97.16%**")
        st.write("‚Ä¢ ƒêƒÉng k√Ω kh√°m online tƒÉng m·∫°nh: **+209%**")
        st.write("‚Ä¢ Tri·ªÉn khai 87 ch·ª©c nƒÉng ph·∫ßn m·ªÅm m·ªõi")
        st.write("‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t: **5,352 l∆∞·ª£t**")
    
    with col2:
        st.info("üéØ **K·∫ø ho·∫°ch ph√°t tri·ªÉn:**")
        st.write("‚Ä¢ N√¢ng c·∫•p h·∫° t·∫ßng server v√† storage")
        st.write("‚Ä¢ TƒÉng c∆∞·ªùng b·∫£o m·∫≠t v·ªõi firewall")
        st.write("‚Ä¢ Ph√°t tri·ªÉn th√™m t√≠nh nƒÉng UMC Care")
        st.write("‚Ä¢ M·ªü r·ªông h·ªá th·ªëng wifi to√†n vi·ªán")
        st.write("‚Ä¢ ƒê√†o t·∫°o nh√¢n vi√™n s·ª≠ d·ª•ng CNTT")

# ==================== TAB PH√íNG CTXH ====================
with tab_ctxh:
    st.markdown("""
    <div class="section-header">
        <h2>ü§ù C√îNG T√ÅC X√É H·ªòI</h2>
        <p>H·ªó tr·ª£ ng∆∞·ªùi b·ªánh, chƒÉm s√≥c c·ªông ƒë·ªìng v√† v·∫≠n ƒë·ªông t√†i tr·ª£</p>
    </div>
    """, unsafe_allow_html=True)
    
    # T·ªïng quan KPIs ch√≠nh
    st.subheader("üìä T·ªïng Quan Ho·∫°t ƒê·ªông CTXH")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "T∆∞ v·∫•n nh·∫≠p vi·ªán",
            f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_nhap_vien']['value']:,}",
            f"vs c√πng k·ª≥: {ctxh_data['ho_tro_nguoi_benh']['tu_van_nhap_vien']['comparison']:.1f}%"
        )
    
    with col2:
        st.metric(
            "H·ªó tr·ª£ kh√≥ khƒÉn",
            f"{ctxh_data['ho_tro_nguoi_benh']['kinh_phi_ho_tro']['value']/1e9:.1f} t·ª∑ VNƒê",
            f"TƒÉng {ctxh_data['ho_tro_nguoi_benh']['kinh_phi_ho_tro']['comparison']:.0f}%"
        )
    
    with col3:
        st.metric(
            "S·ª± h√†i l√≤ng n·ªôi tr√∫",
            f"{ctxh_data['ho_tro_nguoi_benh']['hai_long_noi_tru']['value']:.1f}%",
            f"{ctxh_data['ho_tro_nguoi_benh']['hai_long_noi_tru']['comparison']:.1f}%"
        )
    
    with col4:
        st.metric(
            "ChƒÉm s√≥c c·ªông ƒë·ªìng",
            f"{ctxh_data['cham_soc_cong_dong']['luot_dan']['value']:,} ng∆∞·ªùi",
            f"+{ctxh_data['cham_soc_cong_dong']['luot_dan']['comparison']:.0f}%"
        )
    
    # Tab con cho t·ª´ng m·∫£ng ho·∫°t ƒë·ªông
    subtab1, subtab2, subtab3, subtab4 = st.tabs([
        "üë• H·ªó Tr·ª£ Ng∆∞·ªùi B·ªánh",
        "üè• Sinh Ho·∫°t & T∆∞ V·∫•n", 
        "üåç ChƒÉm S√≥c C·ªông ƒê·ªìng",
        "üí∞ T√†i Tr·ª£ & G√≥p √ù"
    ])
    
    # Tab H·ªó tr·ª£ ng∆∞·ªùi b·ªánh
    with subtab1:
        st.header("üë• H·ªó Tr·ª£ Ng∆∞·ªùi B·ªánh")
        
        # Metrics h·ªó tr·ª£
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "T∆∞ v·∫•n xu·∫•t vi·ªán",
                f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_xuat_vien']['value']:,}",
                f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_xuat_vien']['comparison']:.1f}% vs c√πng k·ª≥"
            )
        
        with col2:
            st.metric(
                "C√†i ƒë·∫∑t UMC Care",
                f"{ctxh_data['ho_tro_nguoi_benh']['cai_dat_app']['value']:,}",
                f"+{ctxh_data['ho_tro_nguoi_benh']['cai_dat_app']['comparison']:.0f}%"
            )
        
        with col3:
            st.metric(
                "Tin nh·∫Øn t√°i kh√°m",
                f"{ctxh_data['ho_tro_nguoi_benh']['tin_nhan_tai_kham']['value']:,}",
                f"+{ctxh_data['ho_tro_nguoi_benh']['tin_nhan_tai_kham']['comparison']:.1f}%"
            )
        
        # Bi·ªÉu ƒë·ªì ho·∫°t ƒë·ªông h·ªó tr·ª£
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì c√°c ho·∫°t ƒë·ªông t∆∞ v·∫•n
            tu_van_data = pd.DataFrame({
                'Ho·∫°t ƒë·ªông': ['T∆∞ v·∫•n nh·∫≠p vi·ªán', 'T∆∞ v·∫•n xu·∫•t vi·ªán', 'G·ªçi ƒëi·ªán h·ªèi thƒÉm', 'Tin nh·∫Øn t√°i kh√°m'],
                'S·ªë l∆∞·ª£ng': [
                    ctxh_data['ho_tro_nguoi_benh']['tu_van_nhap_vien']['value'],
                    ctxh_data['ho_tro_nguoi_benh']['tu_van_xuat_vien']['value'],
                    ctxh_data['ho_tro_nguoi_benh']['goi_dien_thoai']['value'],
                    ctxh_data['ho_tro_nguoi_benh']['tin_nhan_tai_kham']['value']
                ]
            })
            
            fig_tu_van = px.bar(tu_van_data, x='Ho·∫°t ƒë·ªông', y='S·ªë l∆∞·ª£ng',
                               title="Ho·∫°t ƒë·ªông t∆∞ v·∫•n & h·ªó tr·ª£",
                               color='S·ªë l∆∞·ª£ng',
                               color_continuous_scale='Blues')
            fig_tu_van.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_tu_van, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì h·ªó tr·ª£ kh√≥ khƒÉn
            ho_tro_data = pd.DataFrame({
                'Lo·∫°i h·ªó tr·ª£': ['Ng∆∞·ªùi ƒë∆∞·ª£c h·ªó tr·ª£', 'H·ªó tr·ª£ t√¢m l√Ω', 'Ch∆∞∆°ng tr√¨nh'],
                'S·ªë l∆∞·ª£ng': [
                    ctxh_data['ho_tro_nguoi_benh']['ho_tro_kho_khan']['value'],
                    ctxh_data['ho_tro_nguoi_benh']['ho_tro_tam_ly']['value'],
                    ctxh_data['ho_tro_nguoi_benh']['chuong_trinh_ho_tro']['value']
                ]
            })
            
            fig_ho_tro = px.pie(ho_tro_data, values='S·ªë l∆∞·ª£ng', names='Lo·∫°i h·ªó tr·ª£',
                               title="Ph√¢n b·ªï ho·∫°t ƒë·ªông h·ªó tr·ª£",
                               color_discrete_sequence=['#FF6B6B', '#4ECDC4', '#FFA500'])
            st.plotly_chart(fig_ho_tro, use_container_width=True)
        
        # B·∫£ng chi ti·∫øt h·ªó tr·ª£ ng∆∞·ªùi b·ªánh
        st.subheader("üìã Chi Ti·∫øt H·ªó Tr·ª£ Ng∆∞·ªùi B·ªánh")
        
        ho_tro_detail = pd.DataFrame({
            'STT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            'N·ªôi dung': [
                'T∆∞ v·∫•n nh·∫≠p vi·ªán',
                'T∆∞ v·∫•n xu·∫•t vi·ªán', 
                'G·ªçi ƒëi·ªán h·ªèi thƒÉm sau xu·∫•t vi·ªán',
                'Tin nh·∫Øn nh·∫Øc t√°i kh√°m',
                'C√†i ƒë·∫∑t app UMC Care',
                'H·ªó tr·ª£ ng∆∞·ªùi b·ªánh kh√≥ khƒÉn',
                'Kinh ph√≠ h·ªó tr·ª£ kh√≥ khƒÉn',
                'H·ªó tr·ª£ t√¢m l√Ω x√£ h·ªôi',
                'Ch∆∞∆°ng tr√¨nh h·ªó tr·ª£',
                'S·ª± h√†i l√≤ng n·ªôi tr√∫'
            ],
            'K·∫øt qu·∫£ 6 th√°ng': [
                f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_nhap_vien']['value']:,} tr∆∞·ªùng h·ª£p",
                f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_xuat_vien']['value']:,} tr∆∞·ªùng h·ª£p",
                f"{ctxh_data['ho_tro_nguoi_benh']['goi_dien_thoai']['value']:,} cu·ªôc g·ªçi",
                f"{ctxh_data['ho_tro_nguoi_benh']['tin_nhan_tai_kham']['value']:,} tin nh·∫Øn",
                f"{ctxh_data['ho_tro_nguoi_benh']['cai_dat_app']['value']:,} l∆∞·ª£t",
                f"{ctxh_data['ho_tro_nguoi_benh']['ho_tro_kho_khan']['value']:,} l∆∞·ª£t ng∆∞·ªùi",
                f"{ctxh_data['ho_tro_nguoi_benh']['kinh_phi_ho_tro']['value']/1e9:.1f} t·ª∑ VNƒê",
                f"{ctxh_data['ho_tro_nguoi_benh']['ho_tro_tam_ly']['value']:,} l∆∞·ª£t ng∆∞·ªùi",
                f"{ctxh_data['ho_tro_nguoi_benh']['chuong_trinh_ho_tro']['value']:,} ch∆∞∆°ng tr√¨nh",
                f"{ctxh_data['ho_tro_nguoi_benh']['hai_long_noi_tru']['value']:.1f}%"
            ],
            'So s√°nh c√πng k·ª≥ (%)': [
                f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_nhap_vien']['comparison']:.1f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['tu_van_xuat_vien']['comparison']:.1f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['goi_dien_thoai']['comparison']:.0f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['tin_nhan_tai_kham']['comparison']:.1f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['cai_dat_app']['comparison']:.0f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['ho_tro_kho_khan']['comparison']:.0f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['kinh_phi_ho_tro']['comparison']:.0f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['ho_tro_tam_ly']['comparison']:.0f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['chuong_trinh_ho_tro']['comparison']:.1f}%",
                f"{ctxh_data['ho_tro_nguoi_benh']['hai_long_noi_tru']['comparison']:.1f}%"
            ]
        })
        
        st.dataframe(ho_tro_detail, use_container_width=True)
    
    # Tab Sinh ho·∫°t & T∆∞ v·∫•n
    with subtab2:
        st.header("üè• Sinh Ho·∫°t Ng∆∞·ªùi Nh√† & T∆∞ V·∫•n")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Sinh ho·∫°t C·∫•p c·ª©u",
                f"{ctxh_data['sinh_hoat_nha']['lan_sinh_hoat_cc']['value']} l·∫ßn",
                f"{ctxh_data['sinh_hoat_nha']['nguoi_tham_du_cc']['value']:,} ng∆∞·ªùi tham d·ª±"
            )
        
        with col2:
            st.metric(
                "Sinh ho·∫°t GMHS",
                f"{ctxh_data['sinh_hoat_nha']['lan_sinh_hoat_gmhs']['value']} l·∫ßn",
                f"{ctxh_data['sinh_hoat_nha']['nguoi_tham_du_gmhs']['value']:,} ng∆∞·ªùi tham d·ª±"
            )
        
        with col3:
            st.metric(
                "Video call v·ªõi nh√†",
                f"{ctxh_data['sinh_hoat_nha']['videocall']['value']:,}",
                f"{ctxh_data['sinh_hoat_nha']['videocall']['comparison']:.0f}% vs c√πng k·ª≥"
            )
        
        # Bi·ªÉu ƒë·ªì sinh ho·∫°t
        col1, col2 = st.columns(2)
        
        with col1:
            sinh_hoat_data = pd.DataFrame({
                'Khoa': ['C·∫•p c·ª©u', 'GMHS'],
                'S·ªë l·∫ßn sinh ho·∫°t': [
                    ctxh_data['sinh_hoat_nha']['lan_sinh_hoat_cc']['value'],
                    ctxh_data['sinh_hoat_nha']['lan_sinh_hoat_gmhs']['value']
                ],
                'Ng∆∞·ªùi tham d·ª±': [
                    ctxh_data['sinh_hoat_nha']['nguoi_tham_du_cc']['value'],
                    ctxh_data['sinh_hoat_nha']['nguoi_tham_du_gmhs']['value']
                ]
            })
            
            fig_sinh_hoat = px.bar(sinh_hoat_data, x='Khoa', y=['S·ªë l·∫ßn sinh ho·∫°t', 'Ng∆∞·ªùi tham d·ª±'],
                                  title="Sinh ho·∫°t ng∆∞·ªùi nh√† theo khoa",
                                  barmode='group')
            st.plotly_chart(fig_sinh_hoat, use_container_width=True)
        
        with col2:
            # Ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ thu·ªëc
            thuoc_data = pd.DataFrame({
                'Ch·ªâ s·ªë': ['Ch∆∞∆°ng tr√¨nh', 'Ng∆∞·ªùi tham gia', 'T√†i tr·ª£ (t·ª∑ VNƒê)'],
                'Gi√° tr·ªã': [
                    ctxh_data['ho_tro_thuoc']['so_chuong_trinh']['value'],
                    ctxh_data['ho_tro_thuoc']['nguoi_benh_tham_gia']['value'],
                    ctxh_data['ho_tro_thuoc']['tien_tai_tro']['value'] / 1e9
                ]
            })
            
            fig_thuoc = px.bar(thuoc_data, x='Ch·ªâ s·ªë', y='Gi√° tr·ªã',
                              title="Ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ thu·ªëc mi·ªÖn ph√≠",
                              color='Gi√° tr·ªã',
                              color_continuous_scale='Greens')
            st.plotly_chart(fig_thuoc, use_container_width=True)
    
    # Tab ChƒÉm s√≥c c·ªông ƒë·ªìng
    with subtab3:
        st.header("üåç ChƒÉm S√≥c S·ª©c Kh·ªèe C·ªông ƒê·ªìng")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ªïng kinh ph√≠",
                f"{ctxh_data['cham_soc_cong_dong']['tong_kinh_phi']['value']/1e9:.1f} t·ª∑ VNƒê",
                f"{ctxh_data['cham_soc_cong_dong']['tong_kinh_phi']['comparison']:.0f}% vs c√πng k·ª≥"
            )
        
        with col2:
            st.metric(
                "S·ªë ch∆∞∆°ng tr√¨nh",
                f"{ctxh_data['cham_soc_cong_dong']['so_chuong_trinh']['value']}",
                f"{ctxh_data['cham_soc_cong_dong']['so_chuong_trinh']['comparison']:.0f}% vs c√πng k·ª≥"
            )
        
        with col3:
            st.metric(
                "Ng∆∞·ªùi d√¢n ƒë∆∞·ª£c kh√°m",
                f"{ctxh_data['cham_soc_cong_dong']['luot_dan']['value']:,}",
                f"+{ctxh_data['cham_soc_cong_dong']['luot_dan']['comparison']:.0f}%"
            )
        
        with col4:
            st.metric(
                "N·∫°n nh√¢n b·ªã ·∫£nh h∆∞·ªüng b·ªüi ch·∫•t ƒë·ªôc m√†u da cam",
                f"{ctxh_data['cham_soc_cong_dong']['nan_nhan_da_cam']['value']:,}",
                f"+{ctxh_data['cham_soc_cong_dong']['nan_nhan_da_cam']['comparison']:.1f}%"
            )
        
        # Bi·ªÉu ƒë·ªì chƒÉm s√≥c c·ªông ƒë·ªìng
        col1, col2 = st.columns(2)
        
        with col1:
            # ƒê·ªëi t∆∞·ª£ng th∆∞·ªüng
            doi_tuong_data = pd.DataFrame({
                'ƒê·ªëi t∆∞·ª£ng': ['M·∫π VNAH & Th∆∞∆°ng binh', 'N·∫°n nh√¢n da cam', 'Ng∆∞·ªùi d√¢n kh√°c'],
                'S·ªë l∆∞·ª£ng': [
                    ctxh_data['cham_soc_cong_dong']['me_vnah_tb']['value'],
                    ctxh_data['cham_soc_cong_dong']['nan_nhan_da_cam']['value'],
                    ctxh_data['cham_soc_cong_dong']['luot_dan']['value'] - 
                    ctxh_data['cham_soc_cong_dong']['me_vnah_tb']['value'] - 
                    ctxh_data['cham_soc_cong_dong']['nan_nhan_da_cam']['value']
                ]
            })
            
            fig_doi_tuong = px.pie(doi_tuong_data, values='S·ªë l∆∞·ª£ng', names='ƒê·ªëi t∆∞·ª£ng',
                                  title="ƒê·ªëi t∆∞·ª£ng chƒÉm s√≥c c·ªông ƒë·ªìng",
                                  color_discrete_sequence=['#FF6B6B', '#4ECDC4', '#FFA500'])
            st.plotly_chart(fig_doi_tuong, use_container_width=True)
        
        with col2:
            # Qu√† t·∫∑ng
            qua_tang_data = pd.DataFrame({
                'Lo·∫°i qu√†': ['Xe ƒë·∫°p', 'C√¥ng tr√¨nh'],
                'S·ªë l∆∞·ª£ng': [
                    ctxh_data['cham_soc_cong_dong']['tang_xe_dap']['value'],
                    ctxh_data['cham_soc_cong_dong']['cong_trinh']['value']
                ]
            })
            
            fig_qua_tang = px.bar(qua_tang_data, x='Lo·∫°i qu√†', y='S·ªë l∆∞·ª£ng',
                                 title="Qu√† t·∫∑ng cho c·ªông ƒë·ªìng",
                                 color='S·ªë l∆∞·ª£ng',
                                 color_continuous_scale='Oranges')
            st.plotly_chart(fig_qua_tang, use_container_width=True)
    
    # Tab T√†i tr·ª£ & G√≥p √Ω
    with subtab4:
        st.header("üí∞ V·∫≠n ƒê·ªông T√†i Tr·ª£ & Ti·∫øp Nh·∫≠n G√≥p √ù")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "V·∫≠n ƒë·ªông t√†i tr·ª£",
                f"{ctxh_data['van_dong_tai_tro']['so_tien']['value']:.1f} t·ª∑ VNƒê",
                f"+{ctxh_data['van_dong_tai_tro']['so_tien']['comparison']:.1f}%"
            )
        
        with col2:
            st.metric(
                "Th∆∞ khen",
                f"{ctxh_data['tiep_nhan_gop_y']['thu_khen']['value']}",
                f"{ctxh_data['tiep_nhan_gop_y']['thu_khen']['comparison']:.0f}% vs c√πng k·ª≥"
            )
        
        with col3:
            st.metric(
                "Th∆∞ g√≥p √Ω",
                f"{ctxh_data['tiep_nhan_gop_y']['thu_gop_y']['value']}",
                f"+{ctxh_data['tiep_nhan_gop_y']['thu_gop_y']['comparison']:.0f}%"
            )
        
        with col4:
            st.metric(
                "ƒê∆∞·ªùng d√¢y n√≥ng Gƒê",
                f"{ctxh_data['tiep_nhan_gop_y']['duong_day_gd']['value']}",
                f"{ctxh_data['tiep_nhan_gop_y']['duong_day_gd']['comparison']:.1f}% vs c√πng k·ª≥"
            )
        
        # Bi·ªÉu ƒë·ªì feedback
        feedback_data = pd.DataFrame({
            'Lo·∫°i ph·∫£n h·ªìi': ['Th∆∞ khen', 'Th∆∞ g√≥p √Ω', 'ƒê∆∞·ªùng d√¢y Gƒê', 'ƒê∆∞·ªùng d√¢y BYT'],
            'S·ªë l∆∞·ª£ng': [
                ctxh_data['tiep_nhan_gop_y']['thu_khen']['value'],
                ctxh_data['tiep_nhan_gop_y']['thu_gop_y']['value'],
                ctxh_data['tiep_nhan_gop_y']['duong_day_gd']['value'],
                ctxh_data['tiep_nhan_gop_y']['duong_day_byt']['value']
            ]
        })
        
        fig_feedback = px.bar(feedback_data, x='Lo·∫°i ph·∫£n h·ªìi', y='S·ªë l∆∞·ª£ng',
                             title="Ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi b·ªánh v√† c·ªông ƒë·ªìng",
                             color='S·ªë l∆∞·ª£ng',
                             color_continuous_scale='Reds')
        st.plotly_chart(fig_feedback, use_container_width=True)
    
    # T·ªïng k·∫øt v√† insights
    st.subheader("üí° T·ªïng K·∫øt & ƒê√°nh Gi√°")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("üéâ **Th√†nh t·ª±u n·ªïi b·∫≠t:**")
        st.write("‚Ä¢ T∆∞ v·∫•n nh·∫≠p/xu·∫•t vi·ªán: **47,772 tr∆∞·ªùng h·ª£p**")
        st.write("‚Ä¢ H·ªó tr·ª£ kh√≥ khƒÉn: **8.6 t·ª∑ VNƒê** (+295%)")
        st.write("‚Ä¢ H√†i l√≤ng n·ªôi tr√∫: **99.2%** (xu·∫•t s·∫Øc)")
        st.write("‚Ä¢ ChƒÉm s√≥c c·ªông ƒë·ªìng: **4,062 ng∆∞·ªùi d√¢n**")
        st.write("‚Ä¢ H·ªó tr·ª£ thu·ªëc mi·ªÖn ph√≠: **57.9 t·ª∑ VNƒê**")
        st.write("‚Ä¢ Video call gia ƒë√¨nh: **5,719 cu·ªôc g·ªçi**")
    
    with col2:
        st.info("üéØ **K·∫ø ho·∫°ch ph√°t tri·ªÉn:**")
        st.write("‚Ä¢ M·ªü r·ªông ch∆∞∆°ng tr√¨nh h·ªó tr·ª£ kh√≥ khƒÉn")
        st.write("‚Ä¢ TƒÉng c∆∞·ªùng sinh ho·∫°t ng∆∞·ªùi nh√†")
        st.write("‚Ä¢ Ph√°t tri·ªÉn ·ª©ng d·ª•ng UMC Care")
        st.write("‚Ä¢ M·ªü r·ªông chƒÉm s√≥c c·ªông ƒë·ªìng")
        st.write("‚Ä¢ V·∫≠n ƒë·ªông th√™m ngu·ªìn t√†i tr·ª£")
        st.write("‚Ä¢ C·∫£i thi·ªán d·ªãch v·ª• t∆∞ v·∫•n t√¢m l√Ω")

# ==================== TAB TRUNG T√ÇM TRUY·ªÄN TH√îNG ====================
with tab_tttt:
    st.markdown("""
    <div class="section-header">
        <h2>üì± HO·∫†T ƒê·ªòNG TRUY·ªÄN TH√îNG</h2>
        <p>Truy·ªÅn th√¥ng ƒëa k√™nh - N√¢ng cao h√¨nh ·∫£nh b·ªánh vi·ªán</p>
    </div>
    """, unsafe_allow_html=True)
    
    # T·ªïng quan KPIs ch√≠nh
    st.subheader("üìä T·ªïng Quan Ho·∫°t ƒê·ªông Truy·ªÅn Th√¥ng")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "T·ªïng l∆∞·ª£t ti·∫øp c·∫≠n",
            f"{(tttt_data['website']['luot_truy_cap_2025'] + tttt_data['fanpage']['luot_thich_2025'] + tttt_data['youtube']['luot_dang_ky_2025'])/1e6:.1f}M",
            "ƒêa n·ªÅn t·∫£ng"
        )
    
    with col2:
        st.metric(
            "B√†i vi·∫øt/Video",
            f"{tttt_data['bai_viet_truyen_thong']['2025']:,}",
            f"{tttt_data['bai_viet_truyen_thong']['growth']:.0f}%"
        )
    
    with col3:
        st.metric(
            "Website truy c·∫≠p",
            f"{tttt_data['website']['luot_truy_cap_2025']/1e6:.1f}M",
            f"+{tttt_data['website']['luot_truy_cap_growth']:.1f}%"
        )
    
    with col4:
        st.metric(
            "·∫§n ph·∫©m ph√°t h√†nh",
            f"{tttt_data['an_pham']['so_luong_2025']:,}",
            "T·ªù/Quy·ªÉn"
        )
    
    # Sub-tabs cho t·ª´ng m·∫£ng ho·∫°t ƒë·ªông
    subtab1, subtab2, subtab3, subtab4 = st.tabs([
        "üìä T·ªïng Quan", "üì∞ B√°o Ch√≠ & Truy·ªÅn Th√¥ng", "üåê Digital Marketing", "üìö ·∫§n Ph·∫©m & Gi√°o D·ª•c"
    ])
    
    # Tab T·ªïng quan
    with subtab1:
        st.header("üìä T·ªïng Quan Ho·∫°t ƒê·ªông Truy·ªÅn Th√¥ng")
        
        # Bi·ªÉu ƒë·ªì t·ªïng quan c√°c k√™nh
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì so s√°nh l∆∞·ª£t ti·∫øp c·∫≠n c√°c k√™nh
            channels_data = pd.DataFrame({
                'K√™nh': ['Website', 'Facebook', 'YouTube', 'Zalo', 'TikTok'],
                'L∆∞·ª£t ti·∫øp c·∫≠n 2025': [
                    tttt_data['website']['luot_truy_cap_2025'],
                    tttt_data['fanpage']['luot_thich_2025'],
                    tttt_data['youtube']['luot_dang_ky_2025'],
                    tttt_data['zalo']['luot_quan_tam_2025'],
                    tttt_data['tiktok']['luot_dang_ky_2025']
                ],
                'L∆∞·ª£t ti·∫øp c·∫≠n 2024': [
                    tttt_data['website']['luot_truy_cap_2024'],
                    tttt_data['fanpage']['luot_thich_2024'],
                    tttt_data['youtube']['luot_dang_ky_2024'],
                    tttt_data['zalo']['luot_quan_tam_2024'],
                    tttt_data['tiktok']['luot_dang_ky_2024']
                ]
            })
            
            # Chuy·ªÉn ƒë·ªïi sang d·∫°ng log scale cho d·ªÖ nh√¨n
            fig_channels = px.bar(channels_data, x='K√™nh', y=['L∆∞·ª£t ti·∫øp c·∫≠n 2025', 'L∆∞·ª£t ti·∫øp c·∫≠n 2024'],
                                 title="So s√°nh l∆∞·ª£t ti·∫øp c·∫≠n c√°c k√™nh truy·ªÅn th√¥ng",
                                 barmode='group',
                                 color_discrete_sequence=['#00D4FF', '#090979'])
            fig_channels.update_yaxes(type="log", title="L∆∞·ª£t ti·∫øp c·∫≠n (log scale)")
            st.plotly_chart(fig_channels, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng c√°c k√™nh
            growth_data = pd.DataFrame({
                'K√™nh': ['Website', 'Facebook', 'YouTube', 'Zalo', 'TikTok'],
                'TƒÉng tr∆∞·ªüng (%)': [
                    tttt_data['website']['luot_truy_cap_growth'],
                    tttt_data['fanpage']['luot_thich_growth'],
                    tttt_data['youtube']['luot_dang_ky_growth'],
                    tttt_data['zalo']['luot_quan_tam_growth'],
                    100  # TikTok m·ªõi n√™n t√≠nh l√† 100%
                ]
            })
            
            fig_growth = px.bar(growth_data, x='K√™nh', y='TƒÉng tr∆∞·ªüng (%)',
                               title="TƒÉng tr∆∞·ªüng c√°c k√™nh truy·ªÅn th√¥ng",
                               color='TƒÉng tr∆∞·ªüng (%)',
                               color_continuous_scale='RdYlGn')
            fig_growth.add_hline(y=0, line_dash="dash", line_color="gray")
            st.plotly_chart(fig_growth, use_container_width=True)
        
        # S·ªë l∆∞·ª£ng n·ªôi dung s·∫£n xu·∫•t
        st.subheader("üìù S·∫£n Xu·∫•t N·ªôi Dung")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Pie chart ph√¢n b·ªï n·ªôi dung
            content_data = pd.DataFrame({
                'Lo·∫°i n·ªôi dung': ['B√†i vi·∫øt Web', 'B√†i Facebook', 'Video YouTube', 'B√†i Zalo', 'Video TikTok'],
                'S·ªë l∆∞·ª£ng': [
                    tttt_data['website']['bai_viet_2025'],
                    tttt_data['fanpage']['bai_viet_2025'],
                    tttt_data['youtube']['video_2025'],
                    tttt_data['zalo']['bai_viet_2025'],
                    tttt_data['tiktok']['video_2025']
                ]
            })
            
            fig_content = px.pie(content_data, values='S·ªë l∆∞·ª£ng', names='Lo·∫°i n·ªôi dung',
                                title="Ph√¢n b·ªï n·ªôi dung theo k√™nh",
                                color_discrete_sequence=px.colors.sequential.Blues)
            st.plotly_chart(fig_content, use_container_width=True)
        
        with col2:
            # Xu h∆∞·ªõng s·∫£n xu·∫•t n·ªôi dung
            trend_data = pd.DataFrame({
                'Th√°ng': ['T1', 'T2', 'T3', 'T4', 'T5', 'T6'],
                'B√†i vi·∫øt': [120, 135, 140, 138, 142, 147],
                'Video': [25, 28, 30, 32, 31, 35],
                'Ch∆∞∆°ng tr√¨nh': [30, 32, 35, 33, 36, 38]
            })
            
            fig_trend = px.line(trend_data, x='Th√°ng', y=['B√†i vi·∫øt', 'Video', 'Ch∆∞∆°ng tr√¨nh'],
                               title="Xu h∆∞·ªõng s·∫£n xu·∫•t n·ªôi dung 6 th√°ng",
                               markers=True)
            st.plotly_chart(fig_trend, use_container_width=True)
    
    # Tab B√°o ch√≠ & Truy·ªÅn th√¥ng
    with subtab2:
        st.header("üì∞ B√°o Ch√≠ & Truy·ªÅn Th√¥ng ƒê·∫°i Ch√∫ng")
        
        # Metrics b√°o ch√≠
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "B√†i vi·∫øt/Video",
                f"{tttt_data['bai_viet_truyen_thong']['2025']:,}",
                f"{tttt_data['bai_viet_truyen_thong']['growth']:.0f}%"
            )
        
        with col2:
            st.metric(
                "Ch∆∞∆°ng tr√¨nh TV/Radio",
                f"{tttt_data['chuong_trinh_phong_su']['2025']}",
                f"{tttt_data['chuong_trinh_phong_su']['growth']:.0f}%"
            )
        
        with col3:
            st.metric(
                "Ch∆∞∆°ng tr√¨nh gi√°o d·ª•c SK",
                f"{tttt_data['chuong_trinh_giao_duc']['2025']}",
                f"{tttt_data['chuong_trinh_giao_duc']['growth']:.0f}%"
            )
        
        with col4:
            tong_chuong_trinh = tttt_data['chuong_trinh_phong_su']['2025'] + tttt_data['chuong_trinh_giao_duc']['2025']
            st.metric(
                "T·ªïng ch∆∞∆°ng tr√¨nh",
                f"{tong_chuong_trinh}",
                "ch∆∞∆°ng tr√¨nh"
            )
        
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
        col1, col2 = st.columns(2)
        
        with col1:
            # So s√°nh 2 k·ª≥
            media_comparison = pd.DataFrame({
                'Lo·∫°i': ['B√†i vi·∫øt/Video', 'Ph√≥ng s·ª±/Ph·ªèng v·∫•n', 'Gi√°o d·ª•c s·ª©c kh·ªèe'],
                '6 th√°ng 2024': [
                    tttt_data['bai_viet_truyen_thong']['2024'],
                    tttt_data['chuong_trinh_phong_su']['2024'],
                    tttt_data['chuong_trinh_giao_duc']['2024']
                ],
                '6 th√°ng 2025': [
                    tttt_data['bai_viet_truyen_thong']['2025'],
                    tttt_data['chuong_trinh_phong_su']['2025'],
                    tttt_data['chuong_trinh_giao_duc']['2025']
                ]
            })
            
            fig_media = px.bar(media_comparison, x='Lo·∫°i', y=['6 th√°ng 2024', '6 th√°ng 2025'],
                              title="So s√°nh ho·∫°t ƒë·ªông b√°o ch√≠ 2 k·ª≥",
                              barmode='group',
                              color_discrete_sequence=['#FF6B6B', '#00D4FF'])
            st.plotly_chart(fig_media, use_container_width=True)
        
        with col2:
            # Ph√¢n t√≠ch gi·∫£m s√∫t
            decline_data = pd.DataFrame({
                'Ho·∫°t ƒë·ªông': ['B√†i vi·∫øt/Video', 'Ph√≥ng s·ª±/PV', 'Gi√°o d·ª•c SK'],
                'M·ª©c gi·∫£m (%)': [32, 48, 60]
            })
            
            fig_decline = px.bar(decline_data, x='Ho·∫°t ƒë·ªông', y='M·ª©c gi·∫£m (%)',
                                title="M·ª©c ƒë·ªô suy gi·∫£m ho·∫°t ƒë·ªông b√°o ch√≠",
                                color='M·ª©c gi·∫£m (%)',
                                color_continuous_scale='Reds')
            fig_decline.update_traces(marker_color=['#FFA07A', '#FF6B6B', '#DC143C'])
            st.plotly_chart(fig_decline, use_container_width=True)
        
        # Ph√¢n t√≠ch nguy√™n nh√¢n
        st.warning("‚ö†Ô∏è **Ph√¢n t√≠ch suy gi·∫£m ho·∫°t ƒë·ªông b√°o ch√≠:**")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**Nguy√™n nh√¢n c√≥ th·ªÉ:**")
            st.write("‚Ä¢ Chuy·ªÉn d·ªãch sang truy·ªÅn th√¥ng s·ªë")
            st.write("‚Ä¢ T·ªëi ∆∞u ch·∫•t l∆∞·ª£ng thay v√¨ s·ªë l∆∞·ª£ng")
            st.write("‚Ä¢ Thay ƒë·ªïi chi·∫øn l∆∞·ª£c truy·ªÅn th√¥ng")
            st.write("‚Ä¢ T·∫≠p trung v√†o k√™nh s·ªü h·ªØu (owned media)")
        
        with col2:
            st.write("**Khuy·∫øn ngh·ªã:**")
            st.write("‚Ä¢ C√¢n b·∫±ng gi·ªØa b√°o ch√≠ v√† digital")
            st.write("‚Ä¢ TƒÉng c∆∞·ªùng quan h·ªá b√°o ch√≠")
            st.write("‚Ä¢ ƒêa d·∫°ng h√≥a n·ªôi dung")
            st.write("‚Ä¢ Theo d√µi hi·ªáu qu·∫£ truy·ªÅn th√¥ng")
    
    # Tab Digital Marketing
    with subtab3:
        st.header("üåê Digital Marketing & Social Media")
        
        # Website metrics
        st.subheader("üåç Website")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("L∆∞·ª£t truy c·∫≠p", f"{tttt_data['website']['luot_truy_cap_2025']/1e6:.1f}M", 
                     f"+{tttt_data['website']['luot_truy_cap_growth']:.1f}%")
        
        with col2:
            st.metric("B√†i vi·∫øt", f"{tttt_data['website']['bai_viet_2025']}", 
                     f"+{tttt_data['website']['bai_viet_growth']:.0f}%")
        
        with col3:
            avg_daily = tttt_data['website']['luot_truy_cap_2025'] / 180
            st.metric("TB l∆∞·ª£t/ng√†y", f"{avg_daily:,.0f}", "l∆∞·ª£t")
        
        with col4:
            views_per_article = tttt_data['website']['luot_truy_cap_2025'] / tttt_data['website']['bai_viet_2025']
            st.metric("L∆∞·ª£t xem/b√†i", f"{views_per_article:,.0f}", "l∆∞·ª£t")
        
        # Social Media Performance
        st.subheader("üì± Social Media Performance")
        
        # T·∫°o dataframe cho social metrics
        social_data = pd.DataFrame({
            'Platform': ['Facebook', 'YouTube', 'Zalo', 'TikTok'],
            'Followers 2025': [
                tttt_data['fanpage']['luot_thich_2025'],
                tttt_data['youtube']['luot_dang_ky_2025'],
                tttt_data['zalo']['luot_quan_tam_2025'],
                tttt_data['tiktok']['luot_dang_ky_2025']
            ],
            'Growth (%)': [
                tttt_data['fanpage']['luot_thich_growth'],
                tttt_data['youtube']['luot_dang_ky_growth'],
                tttt_data['zalo']['luot_quan_tam_growth'],
                100
            ],
            'Content 2025': [
                tttt_data['fanpage']['bai_viet_2025'],
                tttt_data['youtube']['video_2025'],
                tttt_data['zalo']['bai_viet_2025'],
                tttt_data['tiktok']['video_2025']
            ]
        })
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì followers
            fig_followers = px.bar(social_data, x='Platform', y='Followers 2025',
                                  title="Followers/Subscribers theo platform",
                                  color='Growth (%)',
                                  color_continuous_scale='Viridis',
                                  text='Followers 2025')
            fig_followers.update_traces(texttemplate='%{text:,.0f}', textposition='outside')
            st.plotly_chart(fig_followers, use_container_width=True)
        
        with col2:
            # Engagement metrics
            engagement_data = pd.DataFrame({
                'Metric': ['FB H·ªèi-ƒê√°p', 'FB Engagement Rate', 'YouTube Views/Video', 'Zalo Open Rate'],
                'Value': [
                    tttt_data['fanpage']['hoi_dap_2025'],
                    (tttt_data['fanpage']['hoi_dap_2025'] / tttt_data['fanpage']['luot_thich_2025']) * 100,
                    15000,  # Gi·∫£ ƒë·ªãnh
                    85  # Gi·∫£ ƒë·ªãnh
                ],
                'Unit': ['tin nh·∫Øn', '%', 'views', '%']
            })
            
            fig_engagement = px.bar(engagement_data.head(2), x='Metric', y='Value',
                                   title="Facebook Engagement Metrics",
                                   color='Value',
                                   color_continuous_scale='Blues')
            st.plotly_chart(fig_engagement, use_container_width=True)
        
        # Platform comparison table
        st.subheader("üìä So S√°nh Chi Ti·∫øt C√°c N·ªÅn T·∫£ng")
        
        platform_detail = pd.DataFrame({
            'N·ªÅn t·∫£ng': ['Website', 'Facebook', 'YouTube', 'Zalo', 'TikTok'],
            'Ch·ªâ s·ªë ch√≠nh 2024': [
                f"{tttt_data['website']['luot_truy_cap_2024']:,}",
                f"{tttt_data['fanpage']['luot_thich_2024']:,}",
                f"{tttt_data['youtube']['luot_dang_ky_2024']:,}",
                f"{tttt_data['zalo']['luot_quan_tam_2024']:,}",
                "Ch∆∞a c√≥"
            ],
            'Ch·ªâ s·ªë ch√≠nh 2025': [
                f"{tttt_data['website']['luot_truy_cap_2025']:,}",
                f"{tttt_data['fanpage']['luot_thich_2025']:,}",
                f"{tttt_data['youtube']['luot_dang_ky_2025']:,}",
                f"{tttt_data['zalo']['luot_quan_tam_2025']:,}",
                f"{tttt_data['tiktok']['luot_dang_ky_2025']:,}"
            ],
            'TƒÉng tr∆∞·ªüng': [
                f"+{tttt_data['website']['luot_truy_cap_growth']:.1f}%",
                f"+{tttt_data['fanpage']['luot_thich_growth']:.0f}%",
                f"+{tttt_data['youtube']['luot_dang_ky_growth']:.0f}%",
                f"+{tttt_data['zalo']['luot_quan_tam_growth']:.0f}%",
                "M·ªõi"
            ],
            'N·ªôi dung 2025': [
                f"{tttt_data['website']['bai_viet_2025']} b√†i",
                f"{tttt_data['fanpage']['bai_viet_2025']} b√†i",
                f"{tttt_data['youtube']['video_2025']} video",
                f"{tttt_data['zalo']['bai_viet_2025']} b√†i",
                f"{tttt_data['tiktok']['video_2025']} video"
            ]
        })
        
        st.dataframe(platform_detail, use_container_width=True)
    
    # Tab ·∫§n ph·∫©m & Gi√°o d·ª•c
    with subtab4:
        st.header("üìö ·∫§n Ph·∫©m Truy·ªÅn Th√¥ng & Gi√°o D·ª•c S·ª©c Kh·ªèe")
        
        # Metrics ·∫•n ph·∫©m
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Lo·∫°i ·∫•n ph·∫©m",
                f"{tttt_data['an_pham']['loai_an_pham_2025']}",
                f"+{tttt_data['an_pham']['loai_an_pham_growth']:.0f}%"
            )
        
        with col2:
            st.metric(
                "S·ªë l∆∞·ª£ng ph√°t h√†nh",
                f"{tttt_data['an_pham']['so_luong_2025']:,}",
                "t·ªù/quy·ªÉn"
            )
        
        with col3:
            avg_per_type = tttt_data['an_pham']['so_luong_2025'] / tttt_data['an_pham']['loai_an_pham_2025']
            st.metric(
                "TB s·ªë l∆∞·ª£ng/lo·∫°i",
                f"{avg_per_type:,.0f}",
                "·∫•n ph·∫©m"
            )
        
        with col4:
            st.metric(
                "TƒÉng tr∆∞·ªüng lo·∫°i ·∫•n ph·∫©m",
                f"+{tttt_data['an_pham']['loai_an_pham_growth']:.0f}%",
                "·∫§n t∆∞·ª£ng!"
            )
        
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch
        col1, col2 = st.columns(2)
        
        with col1:
            # TƒÉng tr∆∞·ªüng ·∫•n ph·∫©m
            growth_comparison = pd.DataFrame({
                'Ch·ªâ s·ªë': ['Lo·∫°i ·∫•n ph·∫©m 2024', 'Lo·∫°i ·∫•n ph·∫©m 2025'],
                'S·ªë l∆∞·ª£ng': [
                    tttt_data['an_pham']['loai_an_pham_2024'],
                    tttt_data['an_pham']['loai_an_pham_2025']
                ]
            })
            
            fig_growth = px.bar(growth_comparison, x='Ch·ªâ s·ªë', y='S·ªë l∆∞·ª£ng',
                               title="TƒÉng tr∆∞·ªüng ƒëa d·∫°ng h√≥a ·∫•n ph·∫©m",
                               color='S·ªë l∆∞·ª£ng',
                               color_continuous_scale='Greens',
                               text='S·ªë l∆∞·ª£ng')
            fig_growth.update_traces(texttemplate='%{text}', textposition='outside')
            st.plotly_chart(fig_growth, use_container_width=True)
        
        with col2:
            # Ph√¢n lo·∫°i ·∫•n ph·∫©m (gi·∫£ ƒë·ªãnh)
            publication_types = pd.DataFrame({
                'Lo·∫°i': ['T·ªù r∆°i', 'S·ªï tay', 'E-brochure', 'Banner', 'Poster', 'Infographic', 'Kh√°c'],
                'S·ªë l∆∞·ª£ng': [80000, 50000, 30000, 60000, 40000, 35000, 5713]
            })
            
            fig_types = px.pie(publication_types, values='S·ªë l∆∞·ª£ng', names='Lo·∫°i',
                              title="Ph√¢n b·ªï ·∫•n ph·∫©m theo lo·∫°i (∆∞·ªõc t√≠nh)",
                              color_discrete_sequence=px.colors.sequential.Viridis)
            st.plotly_chart(fig_types, use_container_width=True)
        

# ==================== TAB PH√íNG T·ªî CH·ª®C C√ÅN B·ªò ====================
with tab_tcbc:
    st.markdown("""
    <div class="section-header">
        <h2>üë• T·ªî CH·ª®C C√ÅN B·ªò</h2>
        <p>Qu·∫£n l√Ω t·ªï ch·ª©c, nh√¢n s·ª±, ƒë√†o t·∫°o v√† c√¥ng t√°c thi ƒëua khen th∆∞·ªüng</p>
    </div>
    """, unsafe_allow_html=True)
    
    # T·ªïng quan KPIs ch√≠nh
    st.subheader("üìä T·ªïng quan ho·∫°t ƒë·ªông T·ªï ch·ª©c C√°n b·ªô")
    
    # T√≠nh t·ªïng nh√¢n s·ª±
    tong_nhan_su = tcbc_data['nhan_su']['thuong_xuyen']['value'] + tcbc_data['nhan_su']['vu_viec_toan_tg']['value'] + tcbc_data['nhan_su']['vu_viec_ban_tg']['value']
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "T·ªïng nh√¢n s·ª±",
            f"{tong_nhan_su:,}",
            f"{tcbc_data['nhan_su']['thuong_xuyen']['change'] + tcbc_data['nhan_su']['vu_viec_toan_tg']['change'] + tcbc_data['nhan_su']['vu_viec_ban_tg']['change']:+,} ng∆∞·ªùi"
        )
    
    with col2:
        tong_don_vi = tcbc_data['to_chuc']['phong_trung_tam']['value'] + tcbc_data['to_chuc']['khoa']['value'] + tcbc_data['to_chuc']['trung_tam']['value']
        st.metric(
            "ƒê∆°n v·ªã t·ªï ch·ª©c",
            f"{tong_don_vi}",
            "ƒë∆°n v·ªã ch√≠nh"
        )
    
    with col3:
        st.metric(
            "ƒê√†o t·∫°o n·ªôi b·ªô",
            f"{tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['value']:,}",
            f"{tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['change']:+,} l∆∞·ª£t"
        )
    
    with col4:
        tong_khen_thuong = tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['value'] + tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['value']
        st.metric(
            "Thi ƒëua khen th∆∞·ªüng",
            f"{tong_khen_thuong:,}",
            "l∆∞·ª£t khen th∆∞·ªüng"
        )
    
    # Sub-tabs cho t·ª´ng m·∫£ng ho·∫°t ƒë·ªông
    subtab1, subtab2, subtab3, subtab4, subtab5 = st.tabs([
        "üè¢ T·ªï Ch·ª©c", "üë§ Nh√¢n S·ª±", "üéì ƒê√†o T·∫°o", "üèÜ Thi ƒêua Khen Th∆∞·ªüng", "üìû Khi·∫øu N·∫°i & T·ªë C√°o"
    ])
    
    # Tab T·ªï ch·ª©c
    with subtab1:
        st.header("üè¢ S∆° ƒê·ªì T·ªï Ch·ª©c B·ªánh Vi·ªán")
        
        # Metrics t·ªï ch·ª©c ch√≠nh
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Ph√≤ng/Trung t√¢m",
                f"{tcbc_data['to_chuc']['phong_trung_tam']['value']}",
                "kh√¥ng thay ƒë·ªïi"
            )
        
        with col2:
            st.metric(
                "Khoa",
                f"{tcbc_data['to_chuc']['khoa']['value']}",
                f"{tcbc_data['to_chuc']['khoa']['change']:+,} so v·ªõi c√πng k·ª≥"
            )
        
        with col3:
            st.metric(
                "Trung t√¢m",
                f"{tcbc_data['to_chuc']['trung_tam']['value']}",
                "kh√¥ng thay ƒë·ªïi"
            )
        
        with col4:
            st.metric(
                "ƒê∆°n nguy√™n",
                f"{tcbc_data['to_chuc']['don_nguyen']['value']}",
                f"+{tcbc_data['to_chuc']['don_nguyen']['change']} so v·ªõi c√πng k·ª≥"
            )
        
        # Bi·ªÉu ƒë·ªì c∆° c·∫•u t·ªï ch·ª©c
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì t·ªïng quan ƒë∆°n v·ªã
            org_data = pd.DataFrame({
                'Lo·∫°i ƒë∆°n v·ªã': ['Ph√≤ng/TT', 'Khoa', 'Trung t√¢m', 'ƒê∆°n nguy√™n', 'ƒê∆°n v·ªã', 'Tr·∫°m'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['to_chuc']['phong_trung_tam']['value'],
                    tcbc_data['to_chuc']['khoa']['value'],
                    tcbc_data['to_chuc']['trung_tam']['value'],
                    tcbc_data['to_chuc']['don_nguyen']['value'],
                    tcbc_data['to_chuc']['don_vi']['value'],
                    tcbc_data['to_chuc']['tram']['value']
                ]
            })
            
            fig_org = px.bar(org_data, x='Lo·∫°i ƒë∆°n v·ªã', y='S·ªë l∆∞·ª£ng',
                            title="C∆° c·∫•u t·ªï ch·ª©c theo lo·∫°i ƒë∆°n v·ªã",
                            color='S·ªë l∆∞·ª£ng',
                            color_continuous_scale='Blues',
                            text='S·ªë l∆∞·ª£ng')
            fig_org.update_traces(texttemplate='%{text}', textposition='outside')
            fig_org.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_org, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì c√°c h·ªôi ƒë·ªìng, ban, t·ªï
            support_data = pd.DataFrame({
                'Lo·∫°i t·ªï ch·ª©c': ['H·ªôi ƒë·ªìng', 'T·ªï', 'Ban/Ti·ªÉu ban', 'M·∫°ng l∆∞·ªõi'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['to_chuc']['hoi_dong']['value'],
                    tcbc_data['to_chuc']['to']['value'],
                    tcbc_data['to_chuc']['ban_tieu_ban']['value'],
                    tcbc_data['to_chuc']['mang_luoi']['value']
                ]
            })
            
            fig_support = px.pie(support_data, values='S·ªë l∆∞·ª£ng', names='Lo·∫°i t·ªï ch·ª©c',
                                title="C√°c t·ªï ch·ª©c h·ªó tr·ª£",
                                color_discrete_sequence=['#FF6B6B', '#4ECDC4', '#FFA500', '#32CD32'])
            st.plotly_chart(fig_support, use_container_width=True)
        
        # Ho·∫°t ƒë·ªông s·∫Øp x·∫øp ƒë∆°n v·ªã
        st.subheader("üîÑ Ho·∫°t ƒê·ªông S·∫Øp X·∫øp T·ªï Ch·ª©c")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "Th√†nh l·∫≠p m·ªõi",
                f"{tcbc_data['to_chuc']['sap_xep_don_vi']['thanh_lap']['value']}",
                f"+{tcbc_data['to_chuc']['sap_xep_don_vi']['thanh_lap']['change']} ƒë∆°n v·ªã"
            )
        
        with col2:
            st.metric(
                "ƒê·ªïi t√™n",
                f"{tcbc_data['to_chuc']['sap_xep_don_vi']['doi_ten']['value']}",
                f"+{tcbc_data['to_chuc']['sap_xep_don_vi']['doi_ten']['change']} so v·ªõi c√πng k·ª≥"
            )
        
        with col3:
            st.metric(
                "Gi·∫£i th·ªÉ",
                f"{tcbc_data['to_chuc']['sap_xep_don_vi']['giai_the']['value']}",
                f"+{tcbc_data['to_chuc']['sap_xep_don_vi']['giai_the']['change']} so v·ªõi c√πng k·ª≥"
            )
        
        # B·∫£ng chi ti·∫øt t·ªï ch·ª©c
        st.subheader("üìã B·∫£ng Chi Ti·∫øt C∆° C·∫•u T·ªï Ch·ª©c")
        
        org_detail = pd.DataFrame({
            'STT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
            'Lo·∫°i t·ªï ch·ª©c': [
                'Ph√≤ng/Trung t√¢m/ƒê∆°n v·ªã',
                'Khoa',
                'Trung t√¢m chuy√™n m√¥n',
                'ƒê∆°n nguy√™n',
                'ƒê∆°n v·ªã',
                'Tr·∫°m',
                'H·ªôi ƒë·ªìng',
                'T·ªï',
                'Ban + Ti·ªÉu ban',
                'M·∫°ng l∆∞·ªõi'
            ],
            'S·ªë l∆∞·ª£ng': [
                tcbc_data['to_chuc']['phong_trung_tam']['value'],
                tcbc_data['to_chuc']['khoa']['value'],
                tcbc_data['to_chuc']['trung_tam']['value'],
                tcbc_data['to_chuc']['don_nguyen']['value'],
                tcbc_data['to_chuc']['don_vi']['value'],
                tcbc_data['to_chuc']['tram']['value'],
                tcbc_data['to_chuc']['hoi_dong']['value'],
                tcbc_data['to_chuc']['to']['value'],
                tcbc_data['to_chuc']['ban_tieu_ban']['value'],
                tcbc_data['to_chuc']['mang_luoi']['value']
            ],
            'So s√°nh c√πng k·ª≥': [
                'Kh√¥ng thay ƒë·ªïi',
                'Gi·∫£m 01',
                'Kh√¥ng thay ƒë·ªïi',
                'TƒÉng 01',
                'Kh√¥ng thay ƒë·ªïi',
                'TƒÉng 01',
                'Kh√¥ng thay ƒë·ªïi',
                'Kh√¥ng thay ƒë·ªïi',
                'Kh√¥ng thay ƒë·ªïi',
                'Kh√¥ng thay ƒë·ªïi'
            ],
            'Ghi ch√∫': [
                'ƒê∆°n v·ªã tham m∆∞u ch√≠nh',
                'ƒê∆°n v·ªã kh√°m ch·ªØa b·ªánh',
                'ƒê∆°n v·ªã h·ªó tr·ª£ chuy√™n m√¥n',
                'Thu·ªôc c√°c khoa',
                'Thu·ªôc ph√≤ng/c∆° s·ªü',
                'ƒê∆°n v·ªã KCB',
                'T·ªï ch·ª©c t∆∞ v·∫•n',
                'ƒê∆°n v·ªã nh·ªè',
                'T·ªï ch·ª©c ƒëi·ªÅu ph·ªëi',
                'H·ªá th·ªëng li√™n k·∫øt'
            ]
        })
        
        st.dataframe(org_detail, use_container_width=True)
    
    # Tab Nh√¢n s·ª±
    with subtab2:
        st.header("üë§ Qu·∫£n L√Ω Nh√¢n S·ª±")
        
        # PH·∫¶N M·ªöI - T·ªïng quan nh√¢n s·ª± 3 c∆° s·ªü
        st.subheader("üè• T·ªïng Quan Nh√¢n S·ª± 3 C∆° S·ªü")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ªïng nh√¢n s·ª± (3 c∆° s·ªü)",
                f"{tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['t6_2025']:,}",
                f"+{tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['tang_giam']:,} so v·ªõi T6.2024"
            )
        
        with col2:
            st.metric(
                "TƒÉng tr∆∞·ªüng nh√¢n s·ª±",
                f"{tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['tang_giam_percent']:.1f}%",
                "so v·ªõi c√πng k·ª≥ nƒÉm tr∆∞·ªõc"
            )
        
        with col3:
            # T√≠nh t·ª∑ l·ªá tr√¨nh ƒë·ªô cao (sau ƒêH + ƒêH)
            trinh_do_cao = tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['t6_2025'] + tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['t6_2025']
            ty_le_trinh_do_cao = (trinh_do_cao / tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['t6_2025']) * 100
            st.metric(
                "Nh√¢n s·ª± tr√¨nh ƒë·ªô cao",
                f"{trinh_do_cao:,}",
                f"{ty_le_trinh_do_cao:.1f}% t·ªïng nh√¢n s·ª±"
            )
        
        with col4:
            # T√≠nh t·ª∑ l·ªá nh√¢n s·ª± c√≥ chuy√™n m√¥n y t·∫ø
            chuyen_mon_yte = (tcbc_data['nhan_su']['co_cau_chi_tiet']['giao_su']['so_luong'] + 
                             tcbc_data['nhan_su']['co_cau_chi_tiet']['pho_giao_su']['so_luong'] + 
                             tcbc_data['nhan_su']['co_cau_chi_tiet']['tien_si']['so_luong'] + 
                             tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck2']['so_luong'] + 
                             tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['so_luong'] + 
                             tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck1']['so_luong'])
            st.metric(
                "Nh√¢n s·ª± chuy√™n m√¥n cao",
                f"{chuyen_mon_yte:,}",
                f"{(chuyen_mon_yte/tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['t6_2025']*100):.1f}% t·ªïng NS"
            )
        
        # So s√°nh c∆° c·∫•u tr√¨nh ƒë·ªô T6.2024 vs T6.2025
        st.subheader("üìä So S√°nh C∆° C·∫•u Tr√¨nh ƒê·ªô (T6.2024 vs T6.2025)")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì so s√°nh 2 k·ª≥
            trinh_do_comparison = pd.DataFrame({
                'Tr√¨nh ƒë·ªô': ['Sau ƒë·∫°i h·ªçc', 'ƒê·∫°i h·ªçc', 'Cao ƒë·∫≥ng/TH', 'Ph·ªï th√¥ng TH'],
                'T6.2024': [
                    tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['t6_2024'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['t6_2024'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['t6_2024'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['t6_2024']
                ],
                'T6.2025': [
                    tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['t6_2025'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['t6_2025'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['t6_2025'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['t6_2025']
                ]
            })
            
            fig_trinh_do = px.bar(trinh_do_comparison, x='Tr√¨nh ƒë·ªô', y=['T6.2024', 'T6.2025'],
                                 title="So s√°nh c∆° c·∫•u tr√¨nh ƒë·ªô 2 k·ª≥",
                                 barmode='group',
                                 color_discrete_sequence=['#FF6B6B', '#4ECDC4'])
            fig_trinh_do.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_trinh_do, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì tƒÉng tr∆∞·ªüng
            tang_truong_data = pd.DataFrame({
                'Tr√¨nh ƒë·ªô': ['Sau ƒêH', 'ƒê·∫°i h·ªçc', 'Cƒê/TH', 'PT TH'],
                'TƒÉng tr∆∞·ªüng (%)': [
                    tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['tang_giam_percent'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['tang_giam_percent'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['tang_giam_percent'],
                    tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['tang_giam_percent']
                ]
            })
            
            fig_tang_truong = px.bar(tang_truong_data, x='Tr√¨nh ƒë·ªô', y='TƒÉng tr∆∞·ªüng (%)',
                                    title="TƒÉng tr∆∞·ªüng theo tr√¨nh ƒë·ªô (%)",
                                    color='TƒÉng tr∆∞·ªüng (%)',
                                    color_continuous_scale='RdYlGn',
                                    color_continuous_midpoint=0)
            fig_tang_truong.add_hline(y=0, line_dash="dash", line_color="black")
            st.plotly_chart(fig_tang_truong, use_container_width=True)
        
        # C∆° c·∫•u chi ti·∫øt theo ch·ª©c danh v√† chuy√™n m√¥n
        st.subheader("üéì C∆° C·∫•u Chi Ti·∫øt Theo Ch·ª©c Danh & Chuy√™n M√¥n")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Pie chart c∆° c·∫•u ch·ª©c danh cao c·∫•p
            chuc_danh_cao = pd.DataFrame({
                'Ch·ª©c danh': ['Gi√°o s∆∞', 'Ph√≥ Gi√°o s∆∞', 'Ti·∫øn sƒ©', 'BS CKII', 'Th·∫°c sƒ©', 'BS CKI', 'Kh√°c'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['giao_su']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['pho_giao_su']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['tien_si']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck2']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck1']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['dai_hoc_chi_tiet']['so_luong'] + 
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['cao_dang']['so_luong'] + 
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['trung_hoc']['so_luong'] + 
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['nhan_vien_yte_khac']['so_luong']
                ]
            })
            
            fig_chuc_danh = px.pie(chuc_danh_cao, values='S·ªë l∆∞·ª£ng', names='Ch·ª©c danh',
                                  title="C∆° c·∫•u theo ch·ª©c danh & chuy√™n m√¥n",
                                  color_discrete_sequence=px.colors.qualitative.Set3)
            fig_chuc_danh.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_chuc_danh, use_container_width=True)
        
        with col2:
            # Bar chart top ch·ª©c danh
            top_chuc_danh = pd.DataFrame({
                'Ch·ª©c danh': ['ƒê·∫°i h·ªçc', 'Trung h·ªçc', 'Th·∫°c sƒ©', 'NV Y t·∫ø kh√°c', 'BS CKI'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['dai_hoc_chi_tiet']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['trung_hoc']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['nhan_vien_yte_khac']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck1']['so_luong']
                ]
            })
            
            fig_top_chuc_danh = px.bar(top_chuc_danh, x='Ch·ª©c danh', y='S·ªë l∆∞·ª£ng',
                                      title="Top 5 nh√≥m nh√¢n s·ª± ƒë√¥ng nh·∫•t",
                                      color='S·ªë l∆∞·ª£ng',
                                      color_continuous_scale='Blues',
                                      text='S·ªë l∆∞·ª£ng')
            fig_top_chuc_danh.update_traces(texttemplate='%{text:,}', textposition='outside')
            fig_top_chuc_danh.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_top_chuc_danh, use_container_width=True)
        
        # B·∫£ng chi ti·∫øt c∆° c·∫•u nh√¢n s·ª±
        st.subheader("üìã B·∫£ng Chi Ti·∫øt C∆° C·∫•u Nh√¢n S·ª± (T6.2025)")
        
        # B·∫£ng so s√°nh tr√¨nh ƒë·ªô
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**üìä So s√°nh theo tr√¨nh ƒë·ªô**")
            trinh_do_detail = pd.DataFrame({
                'STT': [1, 2, 3, 4],
                'Tr√¨nh ƒë·ªô': ['Sau ƒë·∫°i h·ªçc', 'ƒê·∫°i h·ªçc', 'Cao ƒë·∫≥ng, trung h·ªçc', 'Ph·ªï th√¥ng trung h·ªçc'],
                'T6.2024': [
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['t6_2024']:,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['t6_2024']:,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['t6_2024']:,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['t6_2024']:,}"
                ],
                'T6.2025': [
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['t6_2025']:,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['t6_2025']:,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['t6_2025']:,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['t6_2025']:,}"
                ],
                'TƒÉng/Gi·∫£m': [
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['tang_giam']:+,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['tang_giam']:+,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['tang_giam']:+,}",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['tang_giam']:+,}"
                ],
                'TƒÉng/Gi·∫£m (%)': [
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['sau_dai_hoc']['tang_giam_percent']:+.1f}%",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['dai_hoc']['tang_giam_percent']:+.1f}%",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['cao_dang_trung_hoc']['tang_giam_percent']:+.1f}%",
                    f"{tcbc_data['nhan_su']['co_cau_trinh_do']['pho_thong_trung_hoc']['tang_giam_percent']:+.1f}%"
                ]
            })
            st.dataframe(trinh_do_detail, use_container_width=True)
        
        with col2:
            st.write("**üéì C∆° c·∫•u theo ch·ª©c danh chi ti·∫øt**")
            chuc_danh_detail = pd.DataFrame({
                'STT': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
                'C∆° c·∫•u': [
                    'Gi√°o s∆∞', 'Ph√≥ Gi√°o s∆∞', 'Ti·∫øn sƒ©', 'B√°c s·ªπ chuy√™n khoa II',
                    'Th·∫°c sƒ©', 'B√°c s·ªπ chuy√™n khoa I', 'ƒê·∫°i h·ªçc', 'Cao ƒë·∫≥ng',
                    'Trung h·ªçc', 'Nh√¢n vi√™n y t·∫ø kh√°c'
                ],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['giao_su']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['pho_giao_su']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['tien_si']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck2']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck1']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['dai_hoc_chi_tiet']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['cao_dang']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['trung_hoc']['so_luong'],
                    tcbc_data['nhan_su']['co_cau_chi_tiet']['nhan_vien_yte_khac']['so_luong']
                ],
                'T·ª∑ l·ªá (%)': [
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['giao_su']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['pho_giao_su']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['tien_si']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck2']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['bac_sy_ck1']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['dai_hoc_chi_tiet']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['cao_dang']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['trung_hoc']['ty_le']:.2f}%",
                    f"{tcbc_data['nhan_su']['co_cau_chi_tiet']['nhan_vien_yte_khac']['ty_le']:.2f}%"
                ]
            })
            st.dataframe(chuc_danh_detail, use_container_width=True)
        
        # Metrics nh√¢n s·ª± c≈© (gi·ªØ l·∫°i ph·∫ßn n√†y)
        st.subheader("üë§ Qu·∫£n L√Ω Nh√¢n S·ª± H·ª£p ƒê·ªìng")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Nh√¢n vi√™n th∆∞·ªùng xuy√™n",
                f"{tcbc_data['nhan_su']['thuong_xuyen']['value']:,}",
                f"+{tcbc_data['nhan_su']['thuong_xuyen']['change']:+,} ng∆∞·ªùi"
            )
        
        with col2:
            st.metric(
                "V·ª• vi·ªác to√†n th·ªùi gian",
                f"{tcbc_data['nhan_su']['vu_viec_toan_tg']['value']:,}",
                f"{tcbc_data['nhan_su']['vu_viec_toan_tg']['change']:+,} ng∆∞·ªùi"
            )
        
        with col3:
            st.metric(
                "V·ª• vi·ªác b√°n th·ªùi gian",
                f"{tcbc_data['nhan_su']['vu_viec_ban_tg']['value']:,}",
                f"+{tcbc_data['nhan_su']['vu_viec_ban_tg']['change']:+,} ng∆∞·ªùi"
            )
        
        with col4:
            st.metric(
                "Tuy·ªÉn d·ª•ng 6 th√°ng",
                f"{tcbc_data['nhan_su']['tuyen_dung']['value']:,}",
                f"{tcbc_data['nhan_su']['tuyen_dung']['change']:+,} ng∆∞·ªùi"
            )
        
        # Ph√¢n t√≠ch v√† insights 
        st.subheader("üí° Ph√¢n T√≠ch & ƒê√°nh Gi√°")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("üéØ **ƒêi·ªÉm m·∫°nh c∆° c·∫•u nh√¢n s·ª±:**")
            st.write(f"‚Ä¢ **{tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['t6_2025']:,} nh√¢n s·ª±** t·∫°i 3 c∆° s·ªü")
            st.write(f"‚Ä¢ **{ty_le_trinh_do_cao:.1f}%** c√≥ tr√¨nh ƒë·ªô t·ª´ ƒë·∫°i h·ªçc tr·ªü l√™n")
            st.write(f"‚Ä¢ **{chuyen_mon_yte:,} ng∆∞·ªùi** ({(chuyen_mon_yte/tcbc_data['nhan_su']['tong_nhan_su_3_co_so']['t6_2025']*100):.1f}%) c√≥ chuy√™n m√¥n cao")
            st.write(f"‚Ä¢ **{tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['so_luong']:,} Th·∫°c sƒ©** ({tcbc_data['nhan_su']['co_cau_chi_tiet']['thac_si']['ty_le']:.1f}%)")
            st.write(f"‚Ä¢ **{tcbc_data['nhan_su']['co_cau_chi_tiet']['giao_su']['so_luong'] + tcbc_data['nhan_su']['co_cau_chi_tiet']['pho_giao_su']['so_luong']} GS/PGS** ƒë·∫≥ng c·∫•p qu·ªëc gia")
        
        with col2:
            st.info("üìà **Xu h∆∞·ªõng ph√°t tri·ªÉn:**")
            st.write("‚Ä¢ **TƒÉng tr∆∞·ªüng t√≠ch c·ª±c:** +163 nh√¢n s·ª± (+3.9%)")
            st.write("‚Ä¢ **N√¢ng cao tr√¨nh ƒë·ªô:** Sau ƒêH +6.7%, ƒêH +13.7%")
            st.write("‚Ä¢ **T·ªëi ∆∞u c∆° c·∫•u:** Gi·∫£m Cƒê/TH (-11.6%)")
            st.write("‚Ä¢ **ƒê·∫ßu t∆∞ ch·∫•t l∆∞·ª£ng:** ∆Øu ti√™n nh√¢n s·ª± tr√¨nh ƒë·ªô cao")
            st.write("‚Ä¢ **ƒê·ªãnh h∆∞·ªõng:** X√¢y d·ª±ng ƒë·ªôi ng≈© chuy√™n m√¥n s√¢u")
        
        # Xu h∆∞·ªõng bi·∫øn ƒë·ªông (gi·ªØ l·∫°i ph·∫ßn c≈©)
        st.subheader("üìà Xu H∆∞·ªõng Bi·∫øn ƒê·ªông H·ª£p ƒê·ªìng Lao ƒê·ªông")
        
        months = ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6']
        
        # Ph√¢n b·ªï tuy·ªÉn d·ª•ng v√† ch·∫•m d·ª©t qua 6 th√°ng
        tuyen_dung_trend = [18, 20, 15, 22, 16, 14]  # T·ªïng = 105
        cham_dut_trend = [8, 5, 6, 7, 4, 6]  # T·ªïng = 36
        
        fig_hr_trend = go.Figure()
        fig_hr_trend.add_trace(go.Scatter(x=months, y=tuyen_dung_trend,
                                         mode='lines+markers', name='Tuy·ªÉn d·ª•ng',
                                         line=dict(color='#4ECDC4', width=3)))
        fig_hr_trend.add_trace(go.Scatter(x=months, y=cham_dut_trend,
                                         mode='lines+markers', name='Ch·∫•m d·ª©t HƒêLƒê',
                                         line=dict(color='#FF6B6B', width=3)))
        
        fig_hr_trend.update_layout(
            title="Xu h∆∞·ªõng tuy·ªÉn d·ª•ng v√† ch·∫•m d·ª©t h·ª£p ƒë·ªìng",
            xaxis_title="Th√°ng",
            yaxis_title="S·ªë ng∆∞·ªùi",
            height=400
        )
        st.plotly_chart(fig_hr_trend, use_container_width=True)
    
    # Tab ƒê√†o t·∫°o
    with subtab3:
        st.header("üéì ƒê√†o T·∫°o & Ph√°t Tri·ªÉn Nh√¢n S·ª±")
        
        # Metrics ƒë√†o t·∫°o
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "C·ª≠ ƒëi ƒë√†o t·∫°o",
                f"{tcbc_data['dao_tao']['cu_dao_tao']['value']:,}",
                f"+{tcbc_data['dao_tao']['cu_dao_tao']['change']:+,} l∆∞·ª£t"
            )
        
        with col2:
            st.metric(
                "ƒê√†o t·∫°o trong n∆∞·ªõc",
                f"{tcbc_data['dao_tao']['cu_dao_tao']['detail']['trong_nuoc']:,}",
                f"{(tcbc_data['dao_tao']['cu_dao_tao']['detail']['trong_nuoc']/tcbc_data['dao_tao']['cu_dao_tao']['value']*100):.1f}%"
            )
        
        with col3:
            st.metric(
                "ƒê√†o t·∫°o n∆∞·ªõc ngo√†i",
                f"{tcbc_data['dao_tao']['cu_dao_tao']['detail']['nuoc_ngoai']:,}",
                f"{(tcbc_data['dao_tao']['cu_dao_tao']['detail']['nuoc_ngoai']/tcbc_data['dao_tao']['cu_dao_tao']['value']*100):.1f}%"
            )
        
        with col4:
            st.metric(
                "ƒê√†o t·∫°o n·ªôi b·ªô",
                f"{tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['value']:,}",
                f"+{tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['change']:+,} l∆∞·ª£t"
            )
        
        # Bi·ªÉu ƒë·ªì ƒë√†o t·∫°o
        col1, col2 = st.columns(2)
        
        with col1:
            # So s√°nh ƒë√†o t·∫°o trong/ngo√†i n∆∞·ªõc
            training_location = pd.DataFrame({
                'ƒê·ªãa ƒëi·ªÉm': ['Trong n∆∞·ªõc', 'N∆∞·ªõc ngo√†i'],
                'S·ªë l∆∞·ª£t': [
                    tcbc_data['dao_tao']['cu_dao_tao']['detail']['trong_nuoc'],
                    tcbc_data['dao_tao']['cu_dao_tao']['detail']['nuoc_ngoai']
                ]
            })
            
            fig_location = px.pie(training_location, values='S·ªë l∆∞·ª£t', names='ƒê·ªãa ƒëi·ªÉm',
                                 title="C∆° c·∫•u ƒë√†o t·∫°o theo ƒë·ªãa ƒëi·ªÉm",
                                 color_discrete_sequence=['#4ECDC4', '#FF6B6B'])
            fig_location.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_location, use_container_width=True)
        
        with col2:
            # So s√°nh ƒë√†o t·∫°o b√™n ngo√†i vs n·ªôi b·ªô
            training_type = pd.DataFrame({
                'Lo·∫°i ƒë√†o t·∫°o': ['C·ª≠ ƒëi ƒë√†o t·∫°o', 'ƒê√†o t·∫°o n·ªôi b·ªô'],
                'S·ªë l∆∞·ª£t': [
                    tcbc_data['dao_tao']['cu_dao_tao']['value'],
                    tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['value']
                ]
            })
            
            fig_type = px.bar(training_type, x='Lo·∫°i ƒë√†o t·∫°o', y='S·ªë l∆∞·ª£t',
                             title="So s√°nh ƒë√†o t·∫°o b√™n ngo√†i vs n·ªôi b·ªô",
                             color='S·ªë l∆∞·ª£t',
                             color_continuous_scale='Viridis',
                             text='S·ªë l∆∞·ª£t')
            fig_type.update_traces(texttemplate='%{text:,}', textposition='outside')
            st.plotly_chart(fig_type, use_container_width=True)
        
        # Xu h∆∞·ªõng ƒë√†o t·∫°o (mock data)
        st.subheader("üìä Xu H∆∞·ªõng ƒê√†o T·∫°o 6 Th√°ng")
        
        # Ph√¢n b·ªï ƒë√†o t·∫°o qua 6 th√°ng
        cu_dao_tao_trend = [45, 52, 48, 55, 51, 50]  # T·ªïng ‚âà 301
        dao_tao_noi_bo_trend = [85, 95, 110, 125, 102, 100]  # T·ªïng ‚âà 617
        
        fig_training_trend = go.Figure()
        fig_training_trend.add_trace(go.Scatter(x=months, y=cu_dao_tao_trend,
                                               mode='lines+markers', name='C·ª≠ ƒëi ƒë√†o t·∫°o',
                                               line=dict(color='#4ECDC4', width=3)))
        fig_training_trend.add_trace(go.Scatter(x=months, y=dao_tao_noi_bo_trend,
                                               mode='lines+markers', name='ƒê√†o t·∫°o n·ªôi b·ªô',
                                               line=dict(color='#FF6B6B', width=3)))
        
        fig_training_trend.update_layout(
            title="Xu h∆∞·ªõng ho·∫°t ƒë·ªông ƒë√†o t·∫°o theo th√°ng",
            xaxis_title="Th√°ng",
            yaxis_title="S·ªë l∆∞·ª£t",
            height=400
        )
        st.plotly_chart(fig_training_trend, use_container_width=True)
        
        # Insights
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("üéØ **Th√†nh t·ª±u ƒë√†o t·∫°o:**")
            st.write(f"‚Ä¢ T·ªïng l∆∞·ª£t ƒë√†o t·∫°o: **{tcbc_data['dao_tao']['cu_dao_tao']['value'] + tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['value']:,} l∆∞·ª£t**")
            st.write(f"‚Ä¢ TƒÉng tr∆∞·ªüng c·ª≠ ƒëi ƒë√†o t·∫°o: **+{tcbc_data['dao_tao']['cu_dao_tao']['change']} l∆∞·ª£t** (+59%)")
            st.write(f"‚Ä¢ ƒê√†o t·∫°o n·ªôi b·ªô: **{tcbc_data['dao_tao']['dao_tao_noi_bo']['so_lop']['value']} l·ªõp**")
            st.write(f"‚Ä¢ T·ª∑ l·ªá ƒë√†o t·∫°o n∆∞·ªõc ngo√†i: **{(tcbc_data['dao_tao']['cu_dao_tao']['detail']['nuoc_ngoai']/tcbc_data['dao_tao']['cu_dao_tao']['value']*100):.1f}%**")
        
        with col2:
            st.info("üìà **K·∫ø ho·∫°ch ph√°t tri·ªÉn:**")
            st.write("‚Ä¢ TƒÉng c∆∞·ªùng ƒë√†o t·∫°o chuy√™n s√¢u")
            st.write("‚Ä¢ M·ªü r·ªông h·ª£p t√°c qu·ªëc t·∫ø")
            st.write("‚Ä¢ Ph√°t tri·ªÉn e-learning")
            st.write("‚Ä¢ ƒê√†o t·∫°o k·ªπ nƒÉng l√£nh ƒë·∫°o")
            st.write("‚Ä¢ Ch∆∞∆°ng tr√¨nh mentoring")
    
    # Tab Thi ƒëua khen th∆∞·ªüng
    with subtab4:
        st.header("üèÜ Thi ƒêua Khen Th∆∞·ªüng")
        
        # Metrics khen th∆∞·ªüng
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "Khen th∆∞·ªüng ƒë·ªãnh k·ª≥",
                f"{tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['value']:,}",
                "l∆∞·ª£t khen th∆∞·ªüng"
            )
        
        with col2:
            st.metric(
                "Khen th∆∞·ªüng ƒë·ªôt xu·∫•t",
                f"{tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['value']:,}",
                "l∆∞·ª£t khen th∆∞·ªüng"
            )
        
        with col3:
            tong_khen_thuong = tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['value'] + tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['value']
            st.metric(
                "T·ªïng khen th∆∞·ªüng",
                f"{tong_khen_thuong:,}",
                "l∆∞·ª£t"
            )
        
        with col4:
            ty_le_khen_thuong = (tong_khen_thuong / tong_nhan_su) * 100
            st.metric(
                "T·ª∑ l·ªá khen th∆∞·ªüng",
                f"{ty_le_khen_thuong:.1f}%",
                "so v·ªõi t·ªïng nh√¢n s·ª±"
            )
        
        # Bi·ªÉu ƒë·ªì khen th∆∞·ªüng
        col1, col2 = st.columns(2)
        
        with col1:
            # So s√°nh khen th∆∞·ªüng ƒë·ªãnh k·ª≥ vs ƒë·ªôt xu·∫•t
            reward_comparison = pd.DataFrame({
                'Lo·∫°i khen th∆∞·ªüng': ['ƒê·ªãnh k·ª≥', 'ƒê·ªôt xu·∫•t'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['value'],
                    tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['value']
                ]
            })
            
            fig_reward = px.pie(reward_comparison, values='S·ªë l∆∞·ª£ng', names='Lo·∫°i khen th∆∞·ªüng',
                               title="C∆° c·∫•u khen th∆∞·ªüng",
                               color_discrete_sequence=['#FFD700', '#FFA500'])
            fig_reward.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_reward, use_container_width=True)
        
        with col2:
            # Chi ti·∫øt khen th∆∞·ªüng ƒë·ªôt xu·∫•t
            detail_reward = pd.DataFrame({
                'ƒê·ªëi t∆∞·ª£ng': ['T·∫≠p th·ªÉ', 'C√° nh√¢n'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['tap_the'],
                    tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['ca_nhan']
                ]
            })
            
            fig_detail = px.bar(detail_reward, x='ƒê·ªëi t∆∞·ª£ng', y='S·ªë l∆∞·ª£ng',
                               title="Khen th∆∞·ªüng ƒë·ªôt xu·∫•t theo ƒë·ªëi t∆∞·ª£ng",
                               color='S·ªë l∆∞·ª£ng',
                               color_continuous_scale='Oranges',
                               text='S·ªë l∆∞·ª£ng')
            fig_detail.update_traces(texttemplate='%{text}', textposition='outside')
            st.plotly_chart(fig_detail, use_container_width=True)
        
        # Xu h∆∞·ªõng khen th∆∞·ªüng (mock data)
        st.subheader("üèÖ Xu H∆∞·ªõng Khen Th∆∞·ªüng 6 Th√°ng")
        
        # Ph√¢n b·ªï khen th∆∞·ªüng qua 6 th√°ng (∆∞u ti√™n khen ƒë·ªôt xu·∫•t)
        khen_dinh_ky_trend = [8, 8, 8, 8, 9, 8]  # T·ªïng ‚âà 49
        khen_dot_xuat_trend = [150, 180, 165, 175, 158, 155]  # T·ªïng ‚âà 983
        
        fig_reward_trend = go.Figure()
        fig_reward_trend.add_trace(go.Bar(x=months, y=khen_dinh_ky_trend,
                                         name='Khen th∆∞·ªüng ƒë·ªãnh k·ª≥',
                                         marker_color='#FFD700'))
        fig_reward_trend.add_trace(go.Bar(x=months, y=khen_dot_xuat_trend,
                                         name='Khen th∆∞·ªüng ƒë·ªôt xu·∫•t',
                                         marker_color='#FFA500'))
        
        fig_reward_trend.update_layout(
            title="Xu h∆∞·ªõng khen th∆∞·ªüng theo th√°ng",
            xaxis_title="Th√°ng",
            yaxis_title="S·ªë l∆∞·ª£t",
            barmode='group',
            height=400
        )
        st.plotly_chart(fig_reward_trend, use_container_width=True)
        
        # B·∫£ng th·ªëng k√™ khen th∆∞·ªüng
        st.subheader("üìã Th·ªëng K√™ Chi Ti·∫øt Khen Th∆∞·ªüng")
        
        reward_stats = pd.DataFrame({
            'Lo·∫°i khen th∆∞·ªüng': ['ƒê·ªãnh k·ª≥ - T·∫≠p th·ªÉ', 'ƒê·ªãnh k·ª≥ - C√° nh√¢n', 'ƒê·ªôt xu·∫•t - T·∫≠p th·ªÉ', 'ƒê·ªôt xu·∫•t - C√° nh√¢n', 'ƒê·ªôt xu·∫•t - Ph·ª• thu·ªôc'],
            'S·ªë l∆∞·ª£t': [
                tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['detail']['tap_the'],
                tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['detail']['ca_nhan'],
                tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['tap_the'],
                tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['ca_nhan'],
                tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['phu_thuoc']
            ],
            'T·ª∑ l·ªá (%)': [
                f"{(tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['detail']['tap_the']/tong_khen_thuong*100):.1f}%",
                f"{(tcbc_data['thi_dua_khen_thuong']['khen_dinh_ky']['detail']['ca_nhan']/tong_khen_thuong*100):.1f}%",
                f"{(tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['tap_the']/tong_khen_thuong*100):.1f}%",
                f"{(tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['ca_nhan']/tong_khen_thuong*100):.1f}%",
                f"{(tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['detail']['phu_thuoc']/tong_khen_thuong*100):.1f}%"
            ]
        })
        
        st.dataframe(reward_stats, use_container_width=True)
        
        # Insights
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("üåü **ƒêi·ªÉm n·ªïi b·∫≠t:**")
            st.write(f"‚Ä¢ T·ªïng **{tong_khen_thuong:,} l∆∞·ª£t** khen th∆∞·ªüng")
            st.write(f"‚Ä¢ Khen ƒë·ªôt xu·∫•t chi·∫øm **{(tcbc_data['thi_dua_khen_thuong']['khen_dot_xuat']['value']/tong_khen_thuong*100):.1f}%**")
            st.write(f"‚Ä¢ T·ª∑ l·ªá khen/nh√¢n s·ª±: **{ty_le_khen_thuong:.1f}%**")
            st.write("‚Ä¢ ƒê·ªông vi√™n tinh th·∫ßn t√≠ch c·ª±c")
        
        with col2:
            st.info("üéØ **ƒê·ªãnh h∆∞·ªõng:**")
            st.write("‚Ä¢ ƒêa d·∫°ng h√≥a h√¨nh th·ª©c khen th∆∞·ªüng")
            st.write("‚Ä¢ TƒÉng c∆∞·ªùng khen t·∫≠p th·ªÉ")
            st.write("‚Ä¢ Khen th∆∞·ªüng k·ªãp th·ªùi")
            st.write("‚Ä¢ G·∫Øn khen th∆∞·ªüng v·ªõi KPI")
    
    # Tab Khi·∫øu n·∫°i t·ªë c√°o
    with subtab5:
        st.header("üìû Khi·∫øu N·∫°i, T·ªë C√°o & Ph·∫£n √Ånh")
        
        # Metrics khi·∫øu n·∫°i
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "ƒê∆°n th∆∞ khi·∫øu n·∫°i",
                f"{tcbc_data['khieu_nai_to_cao']['don_thu_khieu_nai']['value']}",
                "v·ª• vi·ªác"
            )
        
        with col2:
            st.metric(
                "ƒê∆°n th∆∞ t·ªë c√°o",
                f"{tcbc_data['khieu_nai_to_cao']['don_thu_to_cao']['value']}",
                "v·ª• vi·ªác"
            )
        
        with col3:
            st.metric(
                "ƒê√£ gi·∫£i quy·∫øt",
                f"{tcbc_data['khieu_nai_to_cao']['da_giai_quyet']['value']}",
                "v·ª• vi·ªác"
            )
        
        with col4:
            st.metric(
                "Ch∆∞a gi·∫£i quy·∫øt",
                f"{tcbc_data['khieu_nai_to_cao']['chua_giai_quyet']['value']}",
                "v·ª• vi·ªác"
            )
        
        # Bi·ªÉu ƒë·ªì tr·∫°ng th√°i khi·∫øu n·∫°i
        if tcbc_data['khieu_nai_to_cao']['don_thu_khieu_nai']['value'] > 0:
            complaint_status = pd.DataFrame({
                'Tr·∫°ng th√°i': ['ƒê√£ ti·∫øp nh·∫≠n', 'ƒê√£ gi·∫£i quy·∫øt', 'Ch∆∞a gi·∫£i quy·∫øt'],
                'S·ªë l∆∞·ª£ng': [
                    tcbc_data['khieu_nai_to_cao']['don_thu_khieu_nai']['value'],
                    tcbc_data['khieu_nai_to_cao']['da_giai_quyet']['value'],
                    tcbc_data['khieu_nai_to_cao']['chua_giai_quyet']['value']
                ]
            })
            
            fig_complaint = px.bar(complaint_status, x='Tr·∫°ng th√°i', y='S·ªë l∆∞·ª£ng',
                                  title="T√¨nh h√¨nh x·ª≠ l√Ω khi·∫øu n·∫°i",
                                  color='S·ªë l∆∞·ª£ng',
                                  color_continuous_scale='RdYlGn')
            st.plotly_chart(fig_complaint, use_container_width=True)
        else:
            st.success("‚úÖ **T√¨nh h√¨nh ·ªïn ƒë·ªãnh:** Kh√¥ng c√≥ khi·∫øu n·∫°i, t·ªë c√°o trong 6 th√°ng ƒë·∫ßu nƒÉm 2025")
        
        # Th√¥ng tin t√≠ch c·ª±c
        st.subheader("üåü ƒê√°nh Gi√° T√¨nh H√¨nh")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("‚úÖ **T√¨nh h√¨nh t√≠ch c·ª±c:**")
            st.write("‚Ä¢ **0 ƒë∆°n t·ªë c√°o** - Minh b·∫°ch ho·∫°t ƒë·ªông")
            st.write("‚Ä¢ **1 khi·∫øu nai** ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω k·ªãp th·ªùi")
            st.write("‚Ä¢ **0 v·ª• vi·ªác kh·ªüi ki·ªán** - Gi·∫£i quy·∫øt hi·ªáu qu·∫£")
            st.write("‚Ä¢ **0 ph·∫£n √°nh** t·ª´ vi√™n ch·ª©c, NLƒê")
            st.write("‚Ä¢ M√¥i tr∆∞·ªùng l√†m vi·ªác h√†i h√≤a")
        
        with col2:
            st.info("üéØ **Cam k·∫øt duy tr√¨:**")
            st.write("‚Ä¢ X·ª≠ l√Ω khi·∫øu n·∫°i k·ªãp th·ªùi, c√¥ng khai")
            st.write("‚Ä¢ TƒÉng c∆∞·ªùng ƒë·ªëiÌôîh·ª£p t√°c n·ªôi b·ªô") 
            st.write("‚Ä¢ Minh b·∫°ch trong qu·∫£n l√Ω nh√¢n s·ª±")
            st.write("‚Ä¢ L·∫Øng nghe √Ω ki·∫øn NLƒê")
            st.write("‚Ä¢ X√¢y d·ª±ng vƒÉn h√≥a t√≠ch c·ª±c")
        
        # Timeline x·ª≠ l√Ω (n·∫øu c√≥)
        if tcbc_data['khieu_nai_to_cao']['don_thu_khieu_nai']['value'] > 0:
            st.subheader("üìÖ Quy Tr√¨nh X·ª≠ L√Ω Khi·∫øu N·∫°i")
            
            timeline_data = pd.DataFrame({
                'B∆∞·ªõc': ['Ti·∫øp nh·∫≠n', 'X√°c minh', 'Gi·∫£i quy·∫øt', 'Th√¥ng b√°o k·∫øt qu·∫£'],
                'Th·ªùi gian (ng√†y)': [1, 15, 30, 45],
                'Tr·∫°ng th√°i': ['‚úÖ Ho√†n th√†nh', '‚úÖ Ho√†n th√†nh', 'üîÑ ƒêang th·ª±c hi·ªán', '‚è≥ Ch·ªù th·ª±c hi·ªán']
            })
            
            fig_timeline = px.bar(timeline_data, x='B∆∞·ªõc', y='Th·ªùi gian (ng√†y)',
                                 title="Timeline x·ª≠ l√Ω khi·∫øu n·∫°i",
                                 color='Th·ªùi gian (ng√†y)',
                                 color_continuous_scale='Blues')
            st.plotly_chart(fig_timeline, use_container_width=True)
    
    # T·ªïng k·∫øt v√† insights chung
    st.subheader("üí° T·ªïng k·∫øt ho·∫°t ƒë·ªông T·ªï ch·ª©c C√°n b·ªô")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("üéâ **Th√†nh t·ª±u n·ªïi b·∫≠t 6 th√°ng ƒë·∫ßu nƒÉm:**")
        st.write(f"‚Ä¢ **{tong_nhan_su:,} nh√¢n s·ª±** ({tcbc_data['nhan_su']['thuong_xuyen']['change'] + tcbc_data['nhan_su']['vu_viec_ban_tg']['change'] - 5:+,})")
        st.write(f"‚Ä¢ **{tong_khen_thuong:,} l∆∞·ª£t khen th∆∞·ªüng** (cao)")
        st.write(f"‚Ä¢ **{tcbc_data['dao_tao']['cu_dao_tao']['value']:,} l∆∞·ª£t ƒë√†o t·∫°o** (+{tcbc_data['dao_tao']['cu_dao_tao']['change']:+,})")
        st.write(f"‚Ä¢ **{tcbc_data['dao_tao']['dao_tao_noi_bo']['luot_tham_gia']['value']:,} l∆∞·ª£t** ƒë√†o t·∫°o n·ªôi b·ªô")
        st.write(f"‚Ä¢ **30 ƒë∆°n v·ªã** ƒë∆∞·ª£c s·∫Øp x·∫øp, ƒë·ªïi t√™n")
        st.write("‚Ä¢ **0 khi·∫øu n·∫°i nghi√™m tr·ªçng** - ·ªîn ƒë·ªãnh")
    
    with col2:
        st.info("üéØ **ƒê·ªãnh h∆∞·ªõng ph√°t tri·ªÉn:**")
        st.write("‚Ä¢ T·ªëi ∆∞u h√≥a c∆° c·∫•u t·ªï ch·ª©c")
        st.write("‚Ä¢ N√¢ng cao ch·∫•t l∆∞·ª£ng ƒë√†o t·∫°o")
        st.write("‚Ä¢ Ph√°t tri·ªÉn nƒÉng l·ª±c l√£nh ƒë·∫°o")
        st.write("‚Ä¢ S·ªë h√≥a quy tr√¨nh qu·∫£n l√Ω nh√¢n s·ª±")
        st.write("‚Ä¢ X√¢y d·ª±ng vƒÉn h√≥a doanh nghi·ªáp")
        st.write("‚Ä¢ TƒÉng c∆∞·ªùng g·∫Øn k·∫øt n·ªôi b·ªô")

with tab_qttn:
    st.markdown("""
    <div class="section-header">
        <h2>üè¢ QU·∫¢N TR·ªä T√íA NH√Ä</h2>
        <p>Qu·∫£n l√Ω c∆° s·ªü h·∫° t·∫ßng, kh√≠ y t·∫ø, ch·∫•t th·∫£i v√† v·∫≠n h√†nh t√≤a nh√†</p>
    </div>
    """, unsafe_allow_html=True)
    
    # T·ªïng quan KPIs ch√≠nh
    st.subheader("üìä T·ªïng Quan Hi·ªáu Su·∫•t Ho·∫°t ƒê·ªông")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "Ho√†n th√†nh ƒë·ªÅ ngh·ªã K/P/ƒêV",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['value']}%",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['value'] - qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['target']:+}% vs target {qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['target']}%"
        )
    
    with col2:
        st.metric(
            "S·ª≠a ch·ªØa qua ƒëi·ªán tho·∫°i",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['value']}%",
            f"+{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['value'] - qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['target']:+}% vs target"
        )
    
    with col3:
        st.metric(
            "Ho√†n th√†nh k·∫ø ho·∫°ch",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['value']}%",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['value'] - qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['target']:+}% vs target"
        )
    
    with col4:
        st.metric(
            "Ho√†n th√†nh mua s·∫Øm",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['value']}%",
            f"{qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['value'] - qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['target']:+}% vs target"
        )
    
    # Sub-tabs cho t·ª´ng m·∫£ng ho·∫°t ƒë·ªông
    subtab1, subtab2, subtab3, subtab4 = st.tabs([
        "üìà Hi·ªáu Su·∫•t Ho·∫°t ƒê·ªông", "‚ôªÔ∏è Qu·∫£n L√Ω Ch·∫•t Th·∫£i", "‚ö° Kho Kh√≠ Y T·∫ø", "üìä Ph√¢n T√≠ch Theo Th√°ng"
    ])
    
    # Tab Hi·ªáu su·∫•t ho·∫°t ƒë·ªông
    with subtab1:
        st.header("üìà Hi·ªáu Su·∫•t Ho·∫°t ƒê·ªông 6 Th√°ng ƒê·∫ßu NƒÉm")
        
        # Bi·ªÉu ƒë·ªì so s√°nh v·ªõi target
        col1, col2 = st.columns(2)
        
        with col1:
            # Gauge chart cho c√°c KPI
            performance_data = pd.DataFrame({
                'Ch·ªâ ti√™u': ['ƒê·ªÅ ngh·ªã K/P/ƒêV', 'S·ª≠a ch·ªØa ƒêT', 'K·∫ø ho·∫°ch 6T', 'Mua s·∫Øm 6T'],
                'Th·ª±c t·∫ø (%)': [
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['value'],
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['value'],
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['value'],
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['value']
                ],
                'M·ª•c ti√™u (%)': [
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['target'],
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['target'],
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['target'],
                    qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['target']
                ]
            })
            
            fig_performance = px.bar(performance_data, x='Ch·ªâ ti√™u', y=['Th·ª±c t·∫ø (%)', 'M·ª•c ti√™u (%)'],
                                    title="So s√°nh th·ª±c t·∫ø vs m·ª•c ti√™u",
                                    barmode='group',
                                    color_discrete_sequence=['#2E8B57', '#FFB6C1'])
            fig_performance.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_performance, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì radar cho hi·ªáu su·∫•t t·ªïng th·ªÉ
            categories = ['ƒê·ªÅ ngh·ªã K/P/ƒêV', 'S·ª≠a ch·ªØa ƒêT', 'K·∫ø ho·∫°ch 6T', 'Mua s·∫Øm 6T']
            values = [
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['value'],
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['value'],
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['value'],
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['value']
            ]
            targets = [
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['target'],
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['target'],
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['target'],
                qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['target']
            ]
            
            fig_radar = go.Figure()
            
            fig_radar.add_trace(go.Scatterpolar(
                r=values + [values[0]],  # Close the polygon
                theta=categories + [categories[0]],
                fill='toself',
                name='Th·ª±c t·∫ø',
                fillcolor='rgba(46, 139, 87, 0.3)',
                line_color='#2E8B57'
            ))
            
            fig_radar.add_trace(go.Scatterpolar(
                r=targets + [targets[0]],
                theta=categories + [categories[0]],
                fill='toself',
                name='M·ª•c ti√™u',
                fillcolor='rgba(255, 182, 193, 0.3)',
                line_color='#FFB6C1'
            ))
            
            fig_radar.update_layout(
                polar=dict(
                    radialaxis=dict(
                        visible=True,
                        range=[0, 100]
                    )),
                showlegend=True,
                title="Bi·ªÉu ƒë·ªì radar hi·ªáu su·∫•t t·ªïng th·ªÉ"
            )
            st.plotly_chart(fig_radar, use_container_width=True)
        
        # Ph√¢n t√≠ch chi ti·∫øt
        st.subheader("üîç Ph√¢n T√≠ch Chi Ti·∫øt Hi·ªáu Su·∫•t")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.success("‚úÖ **ƒê·∫°t/V∆∞·ª£t m·ª•c ti√™u:**")
            if qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['value'] >= qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_sua_chua']['target']:
                st.write("‚Ä¢ **S·ª≠a ch·ªØa qua ƒëi·ªán tho·∫°i: 100%** (V∆∞·ª£t 5%)")
            if qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['value'] >= qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_mua_sam']['target']:
                st.write("‚Ä¢ **Mua s·∫Øm 6 th√°ng: 78%** (ƒê·∫°t m·ª•c ti√™u)")
        
        with col2:
            st.warning("‚ö†Ô∏è **C·∫ßn c·∫£i thi·ªán:**")
            if qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['value'] < qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_de_nghi']['target']:
                st.write("‚Ä¢ **ƒê·ªÅ ngh·ªã K/P/ƒêV: 63%** (Thi·∫øu 17%)")
            if qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['value'] < qttn_data['hieu_suat_hoat_dong']['ty_le_hoan_thanh_ke_hoach']['target']:
                st.write("‚Ä¢ **K·∫ø ho·∫°ch 6 th√°ng: 70%** (Thi·∫øu 15%)")
        
        # B·∫£ng chi ti·∫øt
        st.subheader("üìã B·∫£ng Chi Ti·∫øt Hi·ªáu Su·∫•t Ho·∫°t ƒê·ªông")
        
        performance_detail = pd.DataFrame({
            'STT': [1, 2, 3, 4],
            'Ch·ªâ ti√™u': [
                'T·ª∑ l·ªá ho√†n th√†nh ƒë·ªÅ ngh·ªã c·ªßa Khoa/Ph√≤ng/ƒê∆°n v·ªã',
                'T·ª∑ l·ªá ho√†n th√†nh s·ª≠a ch·ªØa theo y√™u c·∫ßu qua ƒëi·ªán tho·∫°i',
                'T·ª∑ l·ªá ho√†n th√†nh k·∫ø ho·∫°ch ho·∫°t ƒë·ªông 6 th√°ng ƒë·∫ßu nƒÉm',
                'T·ª∑ l·ªá ho√†n th√†nh k·∫ø ho·∫°ch mua s·∫Øm 6 th√°ng ƒë·∫ßu nƒÉm'
            ],
            'Th·ª±c t·∫ø': ['63%', '100%', '70%', '78%'],
            'M·ª•c ti√™u': ['80%', '95%', '85%', '80%'],
            'Ch√™nh l·ªách': ['-17%', '+5%', '-15%', '-2%'],
            'ƒê√°nh gi√°': ['C·∫ßn c·∫£i thi·ªán', 'Xu·∫•t s·∫Øc', 'C·∫ßn c·∫£i thi·ªán', 'G·∫ßn ƒë·∫°t']
        })
        
        st.dataframe(performance_detail, use_container_width=True)
    
    # Tab Qu·∫£n l√Ω ch·∫•t th·∫£i
    with subtab2:
        st.header("‚ôªÔ∏è Qu·∫£n L√Ω Ch·∫•t Th·∫£i B·ªánh Vi·ªán")
        
        # Metrics ch·∫•t th·∫£i
        tong_chat_thai = qttn_data['chat_thai']['rac_thai_thong_thuong']['value'] + qttn_data['chat_thai']['chat_thai_nguy_hai_lay_nhiem']['value'] + qttn_data['chat_thai']['chat_thai_nguy_hai']['value']
        tong_tai_che = qttn_data['chat_thai']['tai_che']['giay']['value'] + qttn_data['chat_thai']['tai_che']['nhua']['value']
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ªïng ch·∫•t th·∫£i",
                f"{tong_chat_thai:.1f}",
                "t·∫•n"
            )
        
        with col2:
            st.metric(
                "R√°c th·∫£i th√¥ng th∆∞·ªùng",
                f"{qttn_data['chat_thai']['rac_thai_thong_thuong']['value']}",
                f"{(qttn_data['chat_thai']['rac_thai_thong_thuong']['value']/tong_chat_thai*100):.1f}%"
            )
        
        with col3:
            st.metric(
                "Ch·∫•t th·∫£i nguy h·∫°i",
                f"{qttn_data['chat_thai']['chat_thai_nguy_hai_lay_nhiem']['value'] + qttn_data['chat_thai']['chat_thai_nguy_hai']['value']:.1f}",
                f"{((qttn_data['chat_thai']['chat_thai_nguy_hai_lay_nhiem']['value'] + qttn_data['chat_thai']['chat_thai_nguy_hai']['value'])/tong_chat_thai*100):.1f}%"
            )
        
        with col4:
            st.metric(
                "Ch·∫•t th·∫£i t√°i ch·∫ø",
                f"{tong_tai_che:.1f}",
                f"T·ª∑ l·ªá: {(tong_tai_che/tong_chat_thai*100):.1f}%"
            )
        
        # Bi·ªÉu ƒë·ªì ph√¢n t√≠ch ch·∫•t th·∫£i
        col1, col2 = st.columns(2)
        
        with col1:
            # Pie chart ph√¢n lo·∫°i ch·∫•t th·∫£i
            waste_data = pd.DataFrame({
                'Lo·∫°i ch·∫•t th·∫£i': [
                    'R√°c th·∫£i th√¥ng th∆∞·ªùng',
                    'Ch·∫•t th·∫£i nguy h·∫°i l√¢y nhi·ªÖm', 
                    'Ch·∫•t th·∫£i nguy h·∫°i',
                    'T√°i ch·∫ø (Gi·∫•y)',
                    'T√°i ch·∫ø (Nh·ª±a)'
                ],
                'Kh·ªëi l∆∞·ª£ng (t·∫•n)': [
                    qttn_data['chat_thai']['rac_thai_thong_thuong']['value'],
                    qttn_data['chat_thai']['chat_thai_nguy_hai_lay_nhiem']['value'],
                    qttn_data['chat_thai']['chat_thai_nguy_hai']['value'],
                    qttn_data['chat_thai']['tai_che']['giay']['value'],
                    qttn_data['chat_thai']['tai_che']['nhua']['value']
                ]
            })
            
            fig_waste = px.pie(waste_data, values='Kh·ªëi l∆∞·ª£ng (t·∫•n)', names='Lo·∫°i ch·∫•t th·∫£i',
                              title="Ph√¢n lo·∫°i ch·∫•t th·∫£i theo kh·ªëi l∆∞·ª£ng",
                              color_discrete_sequence=['#90EE90', '#FF6B6B', '#DC143C', '#4169E1', '#00CED1'])
            fig_waste.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_waste, use_container_width=True)
        
        with col2:
            # Bar chart so s√°nh
            waste_comparison = pd.DataFrame({
                'Ph√¢n lo·∫°i': ['Ch·∫•t th·∫£i th√¥ng th∆∞·ªùng', 'Ch·∫•t th·∫£i nguy h·∫°i', 'T√°i ch·∫ø'],
                'Kh·ªëi l∆∞·ª£ng (t·∫•n)': [
                    qttn_data['chat_thai']['rac_thai_thong_thuong']['value'],
                    qttn_data['chat_thai']['chat_thai_nguy_hai_lay_nhiem']['value'] + qttn_data['chat_thai']['chat_thai_nguy_hai']['value'],
                    tong_tai_che
                ],
                'M√†u s·∫Øc': ['Xanh l√°', 'ƒê·ªè', 'Xanh d∆∞∆°ng']
            })
            
            fig_comparison = px.bar(waste_comparison, x='Ph√¢n lo·∫°i', y='Kh·ªëi l∆∞·ª£ng (t·∫•n)',
                                   title="So s√°nh kh·ªëi l∆∞·ª£ng ch·∫•t th·∫£i",
                                   color='Ph√¢n lo·∫°i',
                                   color_discrete_sequence=['#90EE90', '#FF6B6B', '#4169E1'])
            fig_comparison.update_traces(text=waste_comparison['Kh·ªëi l∆∞·ª£ng (t·∫•n)'], textposition='outside')
            st.plotly_chart(fig_comparison, use_container_width=True)
        
        # Xu h∆∞·ªõng ch·∫•t th·∫£i (mock data theo th√°ng)
        st.subheader("üìà Xu H∆∞·ªõng Ch·∫•t Th·∫£i 6 Th√°ng")
        
        months = ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6']
        
        # Chia ƒë·ªÅu kh·ªëi l∆∞·ª£ng ch·∫•t th·∫£i cho 6 th√°ng v·ªõi m·ªôt ch√∫t bi·∫øn ƒë·ªông
        rac_thuong_trend = [105, 110, 108, 112, 106, 114]  # T·ªïng ‚âà 655
        nguy_hai_trend = [38, 39, 37, 40, 36, 41]  # T·ªïng ‚âà 231.2
        tai_che_trend = [16, 17, 15, 18, 16, 17]  # T·ªïng ‚âà 99.3
        
        fig_waste_trend = go.Figure()
        fig_waste_trend.add_trace(go.Scatter(x=months, y=rac_thuong_trend,
                                            mode='lines+markers', name='R√°c th·∫£i th√¥ng th∆∞·ªùng',
                                            line=dict(color='#90EE90', width=3)))
        fig_waste_trend.add_trace(go.Scatter(x=months, y=nguy_hai_trend,
                                            mode='lines+markers', name='Ch·∫•t th·∫£i nguy h·∫°i',
                                            line=dict(color='#FF6B6B', width=3)))
        fig_waste_trend.add_trace(go.Scatter(x=months, y=tai_che_trend,
                                            mode='lines+markers', name='T√°i ch·∫ø',
                                            line=dict(color='#4169E1', width=3)))
        
        fig_waste_trend.update_layout(
            title="Xu h∆∞·ªõng ch·∫•t th·∫£i theo th√°ng (t·∫•n)",
            xaxis_title="Th√°ng",
            yaxis_title="Kh·ªëi l∆∞·ª£ng (t·∫•n)",
            height=400
        )
        st.plotly_chart(fig_waste_trend, use_container_width=True)
        
        # Insights v√† khuy·∫øn ngh·ªã
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("üìä **Ph√¢n t√≠ch:**")
            ty_le_tai_che = (tong_tai_che/tong_chat_thai*100)
            st.write(f"‚Ä¢ T·ª∑ l·ªá t√°i ch·∫ø: **{ty_le_tai_che:.1f}%**")
            st.write(f"‚Ä¢ R√°c th√¥ng th∆∞·ªùng chi·∫øm **{(qttn_data['chat_thai']['rac_thai_thong_thuong']['value']/tong_chat_thai*100):.1f}%**")
            st.write(f"‚Ä¢ Ch·∫•t th·∫£i nguy h·∫°i: **{((qttn_data['chat_thai']['chat_thai_nguy_hai_lay_nhiem']['value'] + qttn_data['chat_thai']['chat_thai_nguy_hai']['value'])/tong_chat_thai*100):.1f}%**")
            st.write(f"‚Ä¢ TB ch·∫•t th·∫£i/th√°ng: **{tong_chat_thai/6:.1f} t·∫•n**")
        
        with col2:
            st.success("üéØ **Khuy·∫øn ngh·ªã:**")
            st.write("‚Ä¢ TƒÉng c∆∞·ªùng ph√¢n lo·∫°i r√°c t·∫°i ngu·ªìn")
            st.write("‚Ä¢ M·ªü r·ªông ch∆∞∆°ng tr√¨nh t√°i ch·∫ø")
            st.write("‚Ä¢ Gi·∫£m thi·ªÉu ch·∫•t th·∫£i nguy h·∫°i")
            st.write("‚Ä¢ ƒê√†o t·∫°o √Ω th·ª©c b·∫£o v·ªá m√¥i tr∆∞·ªùng")
    
    # Tab Kho kh√≠ y t·∫ø
    with subtab3:
        st.header("‚ö° Qu·∫£n L√Ω Kho Kh√≠ Y T·∫ø")
        
        # Metrics kho kh√≠ y t·∫ø
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "T·ªìn ƒë·∫ßu k·ª≥",
                f"{qttn_data['kho_khi_y_te']['tong_hop']['ton_dau_ky']/1e6:.1f}M",
                "VNƒê"
            )
        
        with col2:
            st.metric(
                "Nh·∫≠p trong k·ª≥",
                f"{qttn_data['kho_khi_y_te']['tong_hop']['nhap_trong_ky']/1e9:.1f}B",
                "VNƒê"
            )
        
        with col3:
            st.metric(
                "Xu·∫•t trong k·ª≥", 
                f"{qttn_data['kho_khi_y_te']['tong_hop']['xuat_trong_ky']/1e9:.1f}B",
                "VNƒê"
            )
        
        with col4:
            st.metric(
                "T·ªìn cu·ªëi k·ª≥",
                f"{qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']/1e6:.1f}M",
                f"{((qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky'] - qttn_data['kho_khi_y_te']['tong_hop']['ton_dau_ky'])/qttn_data['kho_khi_y_te']['tong_hop']['ton_dau_ky']*100):+.1f}%"
            )
        
        # Bi·ªÉu ƒë·ªì nh·∫≠p xu·∫•t t·ªìn
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì t·ªïng quan nh·∫≠p xu·∫•t t·ªìn
            nxt_data = pd.DataFrame({
                'Ho·∫°t ƒë·ªông': ['T·ªìn ƒë·∫ßu k·ª≥', 'Nh·∫≠p trong k·ª≥', 'Xu·∫•t trong k·ª≥', 'T·ªìn cu·ªëi k·ª≥'],
                'Gi√° tr·ªã (t·ª∑ VNƒê)': [
                    qttn_data['kho_khi_y_te']['tong_hop']['ton_dau_ky']/1e9,
                    qttn_data['kho_khi_y_te']['tong_hop']['nhap_trong_ky']/1e9,
                    qttn_data['kho_khi_y_te']['tong_hop']['xuat_trong_ky']/1e9,
                    qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']/1e9
                ]
            })
            
            fig_nxt = px.bar(nxt_data, x='Ho·∫°t ƒë·ªông', y='Gi√° tr·ªã (t·ª∑ VNƒê)',
                            title="T·ªïng quan Nh·∫≠p-Xu·∫•t-T·ªìn kho kh√≠ y t·∫ø",
                            color='Gi√° tr·ªã (t·ª∑ VNƒê)',
                            color_continuous_scale='Teal',
                            text='Gi√° tr·ªã (t·ª∑ VNƒê)')
            fig_nxt.update_traces(texttemplate='%{text:.2f}B', textposition='outside')
            fig_nxt.update_layout(xaxis_tickangle=-45)
            st.plotly_chart(fig_nxt, use_container_width=True)
        
        with col2:
            # Pie chart c∆° c·∫•u t·ªìn kho cu·ªëi k·ª≥ theo lo·∫°i kh√≠
            inventory_structure = pd.DataFrame({
                'Lo·∫°i kh√≠': ['CO2 25kg', 'CO2 8kg', 'Nit∆° 6m¬≥', 'Oxy l·ªõn 6m¬≥', 'Argon 1m¬≥', 'Oxy nh·ªè 2m¬≥'],
                'Gi√° tr·ªã (tri·ªáu VNƒê)': [
                    qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_25kg']['value']/1e6,
                    qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_8kg']['value']/1e6,
                    qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['nitro_6m3']['value']/1e6,
                    qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_lon_6m3']['value']/1e6,
                    qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['argon_1m3']['value']/1e6,
                    qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_nho_2m3']['value']/1e6
                ]
            })
            
            fig_structure = px.pie(inventory_structure, values='Gi√° tr·ªã (tri·ªáu VNƒê)', names='Lo·∫°i kh√≠',
                                  title="C∆° c·∫•u t·ªìn kho cu·ªëi k·ª≥ theo lo·∫°i kh√≠",
                                  color_discrete_sequence=px.colors.qualitative.Set3)
            fig_structure.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig_structure, use_container_width=True)
        
        # Chi ti·∫øt t·ªìn kho theo t·ª´ng lo·∫°i
        st.subheader("üì¶ Chi Ti·∫øt T·ªìn Kho Cu·ªëi K·ª≥")
        
        inventory_detail = pd.DataFrame({
            'STT': [1, 2, 3, 4, 5, 6],
            'Lo·∫°i kh√≠ y t·∫ø': [
                'Argon lo·∫°i 1m¬≥/b√¨nh',
                'CO2 lo·∫°i 25kg/b√¨nh', 
                'CO2 lo·∫°i 8kg/b√¨nh',
                'Nit∆° kh√≠ lo·∫°i 6m¬≥/b√¨nh',
                'Oxy kh√≠ lo·∫°i l·ªõn 6m¬≥/b√¨nh',
                'Oxy kh√≠ lo·∫°i nh·ªè 2m¬≥/b√¨nh'
            ],
            'S·ªë l∆∞·ª£ng (b√¨nh)': [
                qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['argon_1m3']['quantity'],
                qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_25kg']['quantity'],
                qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_8kg']['quantity'],
                qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['nitro_6m3']['quantity'],
                qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_lon_6m3']['quantity'],
                qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_nho_2m3']['quantity']
            ],
            'Gi√° tr·ªã (VNƒê)': [
                f"{qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['argon_1m3']['value']:,}",
                f"{qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_25kg']['value']:,}",
                f"{qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_8kg']['value']:,}",
                f"{qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['nitro_6m3']['value']:,}",
                f"{qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_lon_6m3']['value']:,}",
                f"{qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_nho_2m3']['value']:,}"
            ],
            'T·ª∑ l·ªá (%)': [
                f"{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['argon_1m3']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%",
                f"{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_25kg']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%",
                f"{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_8kg']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%",
                f"{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['nitro_6m3']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%",
                f"{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_lon_6m3']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%",
                f"{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['oxy_nho_2m3']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%"
            ]
        })
        
        st.dataframe(inventory_detail, use_container_width=True)
        
        # Ph√¢n t√≠ch hi·ªáu qu·∫£ kho
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("üìà **Ph√¢n t√≠ch hi·ªáu qu·∫£:**")
            ty_le_xuat_nhap = (qttn_data['kho_khi_y_te']['tong_hop']['xuat_trong_ky']/qttn_data['kho_khi_y_te']['tong_hop']['nhap_trong_ky']*100)
            st.write(f"‚Ä¢ T·ª∑ l·ªá xu·∫•t/nh·∫≠p: **{ty_le_xuat_nhap:.1f}%**")
            st.write(f"‚Ä¢ V√≤ng quay kho: **{ty_le_xuat_nhap:.1f}%** (T·ªët)")
            st.write(f"‚Ä¢ CO2 25kg chi·∫øm **{(qttn_data['kho_khi_y_te']['chi_tiet_ton_cuoi_ky']['co2_25kg']['value']/qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky']*100):.1f}%** t·ªìn kho")
            st.write(f"‚Ä¢ T·ªìn kho tƒÉng **{((qttn_data['kho_khi_y_te']['tong_hop']['ton_cuoi_ky'] - qttn_data['kho_khi_y_te']['tong_hop']['ton_dau_ky'])/qttn_data['kho_khi_y_te']['tong_hop']['ton_dau_ky']*100):+.1f}%**")
        
        with col2:
            st.success("üéØ **Khuy·∫øn ngh·ªã qu·∫£n l√Ω:**")
            st.write("‚Ä¢ T·ªëi ∆∞u l∆∞·ª£ng t·ªìn kho CO2")
            st.write("‚Ä¢ Theo d√µi chu k·ª≥ s·ª≠ d·ª•ng")
            st.write("‚Ä¢ C·∫£i thi·ªán d·ª± b√°o nhu c·∫ßu")
            st.write("‚Ä¢ Ki·ªÉm tra ƒë·ªãnh k·ª≥ ch·∫•t l∆∞·ª£ng kh√≠")
    
    # Tab Ph√¢n t√≠ch theo th√°ng
    with subtab4:
        st.header("üìä Ph√¢n T√≠ch Kho Kh√≠ Y T·∫ø Theo Th√°ng")
        
        # Xu h∆∞·ªõng nh·∫≠p xu·∫•t t·ªìn theo th√°ng
        months = ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6']
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Bi·ªÉu ƒë·ªì nh·∫≠p xu·∫•t theo th√°ng
            fig_monthly_nxt = go.Figure()
            
            fig_monthly_nxt.add_trace(go.Scatter(
                x=months, 
                y=[x/1e6 for x in qttn_data['kho_khi_y_te']['theo_thang']['nhap']],
                mode='lines+markers', 
                name='Nh·∫≠p kho',
                line=dict(color='#2E8B57', width=3),
                marker=dict(size=8)
            ))
            
            fig_monthly_nxt.add_trace(go.Scatter(
                x=months, 
                y=[x/1e6 for x in qttn_data['kho_khi_y_te']['theo_thang']['xuat']],
                mode='lines+markers', 
                name='Xu·∫•t kho',
                line=dict(color='#FF6B6B', width=3),
                marker=dict(size=8)
            ))
            
            fig_monthly_nxt.update_layout(
                title="Xu h∆∞·ªõng nh·∫≠p-xu·∫•t kho theo th√°ng",
                xaxis_title="Th√°ng",
                yaxis_title="Gi√° tr·ªã (tri·ªáu VNƒê)",
                height=400,
                hovermode='x unified'
            )
            st.plotly_chart(fig_monthly_nxt, use_container_width=True)
        
        with col2:
            # Bi·ªÉu ƒë·ªì t·ªìn kho theo th√°ng
            fig_inventory_trend = go.Figure()
            
            fig_inventory_trend.add_trace(go.Scatter(
                x=months,
                y=[x/1e6 for x in qttn_data['kho_khi_y_te']['theo_thang']['ton_cuoi_ky']],
                mode='lines+markers+text',
                name='T·ªìn kho cu·ªëi k·ª≥',
                line=dict(color='#20B2AA', width=3),
                marker=dict(size=10),
                text=[f"{x/1e6:.1f}M" for x in qttn_data['kho_khi_y_te']['theo_thang']['ton_cuoi_ky']],
                textposition="top center"
            ))
            
            fig_inventory_trend.update_layout(
                title="Xu h∆∞·ªõng t·ªìn kho cu·ªëi k·ª≥ theo th√°ng",
                xaxis_title="Th√°ng", 
                yaxis_title="T·ªìn kho (tri·ªáu VNƒê)",
                height=400
            )
            st.plotly_chart(fig_inventory_trend, use_container_width=True)
        
        # B·∫£ng d·ªØ li·ªáu chi ti·∫øt theo th√°ng
        st.subheader("üìã B·∫£ng Chi Ti·∫øt Nh·∫≠p-Xu·∫•t-T·ªìn Theo Th√°ng")
        
        monthly_detail = pd.DataFrame({
            'Th√°ng': ['Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6'],
            'T·ªìn ƒë·∫ßu k·ª≥ (VNƒê)': [f"{x:,}" for x in qttn_data['kho_khi_y_te']['theo_thang']['ton_dau_ky']],
            'Nh·∫≠p trong k·ª≥ (VNƒê)': [f"{x:,}" for x in qttn_data['kho_khi_y_te']['theo_thang']['nhap']],
            'Xu·∫•t trong k·ª≥ (VNƒê)': [f"{x:,}" for x in qttn_data['kho_khi_y_te']['theo_thang']['xuat']],
            'T·ªìn cu·ªëi k·ª≥ (VNƒê)': [f"{x:,}" for x in qttn_data['kho_khi_y_te']['theo_thang']['ton_cuoi_ky']],
            'T·ª∑ l·ªá xu·∫•t/nh·∫≠p (%)': [
                f"{(qttn_data['kho_khi_y_te']['theo_thang']['xuat'][i]/qttn_data['kho_khi_y_te']['theo_thang']['nhap'][i]*100):.1f}%"
                for i in range(6)
            ]
        })
        
        st.dataframe(monthly_detail, use_container_width=True)
        
        # Ph√¢n t√≠ch xu h∆∞·ªõng
        st.subheader("üìà Ph√¢n T√≠ch Xu H∆∞·ªõng & Insights")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("üîç **Ph√¢n t√≠ch xu h∆∞·ªõng:**")
            # T√¨m th√°ng c√≥ nh·∫≠p cao nh·∫•t v√† th·∫•p nh·∫•t
            max_nhap_idx = qttn_data['kho_khi_y_te']['theo_thang']['nhap'].index(max(qttn_data['kho_khi_y_te']['theo_thang']['nhap']))
            min_nhap_idx = qttn_data['kho_khi_y_te']['theo_thang']['nhap'].index(min(qttn_data['kho_khi_y_te']['theo_thang']['nhap']))
            
            st.write(f"‚Ä¢ Nh·∫≠p cao nh·∫•t: **Th√°ng {max_nhap_idx + 1}** ({qttn_data['kho_khi_y_te']['theo_thang']['nhap'][max_nhap_idx]/1e6:.1f}M VNƒê)")
            st.write(f"‚Ä¢ Nh·∫≠p th·∫•p nh·∫•t: **Th√°ng {min_nhap_idx + 1}** ({qttn_data['kho_khi_y_te']['theo_thang']['nhap'][min_nhap_idx]/1e6:.1f}M VNƒê)")
            
            # T√≠nh TB nh·∫≠p/xu·∫•t h√†ng th√°ng
            avg_nhap = sum(qttn_data['kho_khi_y_te']['theo_thang']['nhap']) / 6
            avg_xuat = sum(qttn_data['kho_khi_y_te']['theo_thang']['xuat']) / 6
            st.write(f"‚Ä¢ TB nh·∫≠p/th√°ng: **{avg_nhap/1e6:.1f}M VNƒê**")
            st.write(f"‚Ä¢ TB xu·∫•t/th√°ng: **{avg_xuat/1e6:.1f}M VNƒê**")
        
        with col2:
            st.success("üí° **Khuy·∫øn ngh·ªã:**")
            st.write("‚Ä¢ Duy tr√¨ m·ª©c t·ªìn kho ·ªïn ƒë·ªãnh 20-25M VNƒê")
            st.write("‚Ä¢ Th√°ng 4 c√≥ nhu c·∫ßu cao, c·∫ßn d·ª± tr√π t·ªët")
            st.write("‚Ä¢ C√¢n b·∫±ng nh·∫≠p-xu·∫•t ƒë·ªÉ tr√°nh t·ªìn ƒë·ªçng")
            st.write("‚Ä¢ Theo d√µi chu k·ª≥ s·ª≠ d·ª•ng theo m√πa")
        
        # Bi·ªÉu ƒë·ªì combo cu·ªëi c√πng
        st.subheader("üìä Bi·ªÉu ƒê·ªì T·ªïng H·ª£p Ho·∫°t ƒê·ªông Kho")
        
        fig_combo = make_subplots(
            rows=2, cols=1,
            subplot_titles=('Nh·∫≠p - Xu·∫•t kho theo th√°ng (tri·ªáu VNƒê)', 'T·ªìn kho cu·ªëi k·ª≥ theo th√°ng (tri·ªáu VNƒê)'),
            vertical_spacing=0.1
        )
        
        # Nh·∫≠p xu·∫•t
        fig_combo.add_trace(
            go.Bar(x=months, y=[x/1e6 for x in qttn_data['kho_khi_y_te']['theo_thang']['nhap']], 
                   name='Nh·∫≠p kho', marker_color='#2E8B57'),
            row=1, col=1
        )
        fig_combo.add_trace(
            go.Bar(x=months, y=[x/1e6 for x in qttn_data['kho_khi_y_te']['theo_thang']['xuat']], 
                   name='Xu·∫•t kho', marker_color='#FF6B6B'),
            row=1, col=1
        )
        
        # T·ªìn kho
        fig_combo.add_trace(
            go.Scatter(x=months, y=[x/1e6 for x in qttn_data['kho_khi_y_te']['theo_thang']['ton_cuoi_ky']], 
                      mode='lines+markers', name='T·ªìn cu·ªëi k·ª≥', 
                      line=dict(color='#20B2AA', width=3), marker=dict(size=8)),
            row=2, col=1
        )
        
        fig_combo.update_layout(height=700, showlegend=True, 
                               title_text="T·ªïng H·ª£p Ho·∫°t ƒê·ªông Kho Kh√≠ Y T·∫ø 6 Th√°ng ƒê·∫ßu NƒÉm 2025")
        st.plotly_chart(fig_combo, use_container_width=True)
    
    # T·ªïng k·∫øt v√† insights chung
    st.subheader("üí° T·ªïng k·∫øt ho·∫°t ƒë·ªông Qu·∫£n tr·ªã T√≤a nh√†")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.success("üéâ **Th√†nh t·ª±u n·ªïi b·∫≠t:**")
        st.write("‚Ä¢ **100% ho√†n th√†nh** s·ª≠a ch·ªØa qua ƒëi·ªán tho·∫°i")
        st.write(f"‚Ä¢ Qu·∫£n l√Ω **{tong_chat_thai:.1f} t·∫•n ch·∫•t th·∫£i** an to√†n")
        st.write(f"‚Ä¢ V·∫≠n h√†nh kho kh√≠ y t·∫ø **{qttn_data['kho_khi_y_te']['tong_hop']['nhap_trong_ky']/1e9:.1f} t·ª∑ VNƒê**")
        st.write(f"‚Ä¢ T·ª∑ l·ªá t√°i ch·∫ø ƒë·∫°t **{(tong_tai_che/tong_chat_thai*100):.1f}%**")
        st.write("‚Ä¢ ƒê·∫£m b·∫£o cung c·∫•p kh√≠ y t·∫ø li√™n t·ª•c")
        st.write("‚Ä¢ Tu√¢n th·ªß quy ƒë·ªãnh m√¥i tr∆∞·ªùng")
    
    with col2:
        st.info("üéØ **K·∫ø ho·∫°ch c·∫£i thi·ªán:**")
        st.write("‚Ä¢ **N√¢ng cao t·ª∑ l·ªá ho√†n th√†nh ƒë·ªÅ ngh·ªã** l√™n 80%")
        st.write("‚Ä¢ **C·∫£i thi·ªán k·∫ø ho·∫°ch ho·∫°t ƒë·ªông** ƒë·∫°t 85%")
        st.write("‚Ä¢ **T·ªëi ∆∞u h√≥a qu·∫£n l√Ω t·ªìn kho** kh√≠ y t·∫ø")
        st.write("‚Ä¢ **M·ªü r·ªông ch∆∞∆°ng tr√¨nh t√°i ch·∫ø** l√™n 15%")
        st.write("‚Ä¢ **S·ªë h√≥a quy tr√¨nh** qu·∫£n l√Ω t√≤a nh√†")
        st.write("‚Ä¢ **N√¢ng cao nƒÉng l·ª±c** d·ª± b√°o nhu c·∫ßu")

# Footer
st.markdown("---")
st.markdown(f"""
<div style='text-align: center; color: gray; padding: 20px;'>
    <p>üè• Dashboard B·ªánh Vi·ªán Multi-Department - VTTB | KSKTYC | CNTT | CTXH | TTTT üìä D·ªØ li·ªáu 6 th√°ng ƒë·∫ßu nƒÉm 2025</p>
    <p>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
</div>
""", unsafe_allow_html=True)
